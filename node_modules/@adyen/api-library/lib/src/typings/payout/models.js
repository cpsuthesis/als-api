"use strict";
/*
 * The version of the OpenAPI document: v68
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./address"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./bankAccount"), exports);
__exportStar(require("./card"), exports);
__exportStar(require("./fraudCheckResult"), exports);
__exportStar(require("./fraudCheckResultWrapper"), exports);
__exportStar(require("./fraudResult"), exports);
__exportStar(require("./fundSource"), exports);
__exportStar(require("./modifyRequest"), exports);
__exportStar(require("./modifyResponse"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./payoutRequest"), exports);
__exportStar(require("./payoutResponse"), exports);
__exportStar(require("./recurring"), exports);
__exportStar(require("./responseAdditionalData3DSecure"), exports);
__exportStar(require("./responseAdditionalDataBillingAddress"), exports);
__exportStar(require("./responseAdditionalDataCard"), exports);
__exportStar(require("./responseAdditionalDataCommon"), exports);
__exportStar(require("./responseAdditionalDataInstallments"), exports);
__exportStar(require("./responseAdditionalDataNetworkTokens"), exports);
__exportStar(require("./responseAdditionalDataOpi"), exports);
__exportStar(require("./responseAdditionalDataSepa"), exports);
__exportStar(require("./serviceError"), exports);
__exportStar(require("./storeDetailAndSubmitRequest"), exports);
__exportStar(require("./storeDetailAndSubmitResponse"), exports);
__exportStar(require("./storeDetailRequest"), exports);
__exportStar(require("./storeDetailResponse"), exports);
__exportStar(require("./submitRequest"), exports);
__exportStar(require("./submitResponse"), exports);
const address_1 = require("./address");
const amount_1 = require("./amount");
const bankAccount_1 = require("./bankAccount");
const card_1 = require("./card");
const fraudCheckResult_1 = require("./fraudCheckResult");
const fraudCheckResultWrapper_1 = require("./fraudCheckResultWrapper");
const fraudResult_1 = require("./fraudResult");
const fundSource_1 = require("./fundSource");
const modifyRequest_1 = require("./modifyRequest");
const modifyResponse_1 = require("./modifyResponse");
const name_1 = require("./name");
const payoutRequest_1 = require("./payoutRequest");
const payoutResponse_1 = require("./payoutResponse");
const recurring_1 = require("./recurring");
const responseAdditionalData3DSecure_1 = require("./responseAdditionalData3DSecure");
const responseAdditionalDataBillingAddress_1 = require("./responseAdditionalDataBillingAddress");
const responseAdditionalDataCard_1 = require("./responseAdditionalDataCard");
const responseAdditionalDataCommon_1 = require("./responseAdditionalDataCommon");
const responseAdditionalDataInstallments_1 = require("./responseAdditionalDataInstallments");
const responseAdditionalDataNetworkTokens_1 = require("./responseAdditionalDataNetworkTokens");
const responseAdditionalDataOpi_1 = require("./responseAdditionalDataOpi");
const responseAdditionalDataSepa_1 = require("./responseAdditionalDataSepa");
const serviceError_1 = require("./serviceError");
const storeDetailAndSubmitRequest_1 = require("./storeDetailAndSubmitRequest");
const storeDetailAndSubmitResponse_1 = require("./storeDetailAndSubmitResponse");
const storeDetailRequest_1 = require("./storeDetailRequest");
const storeDetailResponse_1 = require("./storeDetailResponse");
const submitRequest_1 = require("./submitRequest");
const submitResponse_1 = require("./submitResponse");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "PayoutRequest.ShopperInteractionEnum": payoutRequest_1.PayoutRequest.ShopperInteractionEnum,
    "PayoutResponse.ResultCodeEnum": payoutResponse_1.PayoutResponse.ResultCodeEnum,
    "Recurring.ContractEnum": recurring_1.Recurring.ContractEnum,
    "Recurring.TokenServiceEnum": recurring_1.Recurring.TokenServiceEnum,
    "ResponseAdditionalDataCommon.FraudResultTypeEnum": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon.FraudResultTypeEnum,
    "ResponseAdditionalDataCommon.RecurringProcessingModelEnum": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon.RecurringProcessingModelEnum,
    "StoreDetailAndSubmitRequest.EntityTypeEnum": storeDetailAndSubmitRequest_1.StoreDetailAndSubmitRequest.EntityTypeEnum,
    "StoreDetailRequest.EntityTypeEnum": storeDetailRequest_1.StoreDetailRequest.EntityTypeEnum,
    "SubmitRequest.EntityTypeEnum": submitRequest_1.SubmitRequest.EntityTypeEnum,
};
let typeMap = {
    "Address": address_1.Address,
    "Amount": amount_1.Amount,
    "BankAccount": bankAccount_1.BankAccount,
    "Card": card_1.Card,
    "FraudCheckResult": fraudCheckResult_1.FraudCheckResult,
    "FraudCheckResultWrapper": fraudCheckResultWrapper_1.FraudCheckResultWrapper,
    "FraudResult": fraudResult_1.FraudResult,
    "FundSource": fundSource_1.FundSource,
    "ModifyRequest": modifyRequest_1.ModifyRequest,
    "ModifyResponse": modifyResponse_1.ModifyResponse,
    "Name": name_1.Name,
    "PayoutRequest": payoutRequest_1.PayoutRequest,
    "PayoutResponse": payoutResponse_1.PayoutResponse,
    "Recurring": recurring_1.Recurring,
    "ResponseAdditionalData3DSecure": responseAdditionalData3DSecure_1.ResponseAdditionalData3DSecure,
    "ResponseAdditionalDataBillingAddress": responseAdditionalDataBillingAddress_1.ResponseAdditionalDataBillingAddress,
    "ResponseAdditionalDataCard": responseAdditionalDataCard_1.ResponseAdditionalDataCard,
    "ResponseAdditionalDataCommon": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon,
    "ResponseAdditionalDataInstallments": responseAdditionalDataInstallments_1.ResponseAdditionalDataInstallments,
    "ResponseAdditionalDataNetworkTokens": responseAdditionalDataNetworkTokens_1.ResponseAdditionalDataNetworkTokens,
    "ResponseAdditionalDataOpi": responseAdditionalDataOpi_1.ResponseAdditionalDataOpi,
    "ResponseAdditionalDataSepa": responseAdditionalDataSepa_1.ResponseAdditionalDataSepa,
    "ServiceError": serviceError_1.ServiceError,
    "StoreDetailAndSubmitRequest": storeDetailAndSubmitRequest_1.StoreDetailAndSubmitRequest,
    "StoreDetailAndSubmitResponse": storeDetailAndSubmitResponse_1.StoreDetailAndSubmitResponse,
    "StoreDetailRequest": storeDetailRequest_1.StoreDetailRequest,
    "StoreDetailResponse": storeDetailResponse_1.StoreDetailResponse,
    "SubmitRequest": submitRequest_1.SubmitRequest,
    "SubmitResponse": submitResponse_1.SubmitResponse,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map