"use strict";
/*
 * The version of the OpenAPI document: v3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./aULocalAccountIdentification"), exports);
__exportStar(require("./additionalBankIdentification"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./amountAdjustment"), exports);
__exportStar(require("./bRLocalAccountIdentification"), exports);
__exportStar(require("./balanceMutation"), exports);
__exportStar(require("./balancePlatformNotificationResponse"), exports);
__exportStar(require("./bankAccountV3"), exports);
__exportStar(require("./cALocalAccountIdentification"), exports);
__exportStar(require("./cZLocalAccountIdentification"), exports);
__exportStar(require("./counterpartyV3"), exports);
__exportStar(require("./dKLocalAccountIdentification"), exports);
__exportStar(require("./hULocalAccountIdentification"), exports);
__exportStar(require("./ibanAccountIdentification"), exports);
__exportStar(require("./merchantData"), exports);
__exportStar(require("./nOLocalAccountIdentification"), exports);
__exportStar(require("./nameLocation"), exports);
__exportStar(require("./numberAndBicAccountIdentification"), exports);
__exportStar(require("./pLLocalAccountIdentification"), exports);
__exportStar(require("./partyIdentification"), exports);
__exportStar(require("./paymentInstrument"), exports);
__exportStar(require("./relayedAuthorisationData"), exports);
__exportStar(require("./resource"), exports);
__exportStar(require("./resourceReference"), exports);
__exportStar(require("./sELocalAccountIdentification"), exports);
__exportStar(require("./sGLocalAccountIdentification"), exports);
__exportStar(require("./transactionEventViolation"), exports);
__exportStar(require("./transactionRuleReference"), exports);
__exportStar(require("./transactionRuleSource"), exports);
__exportStar(require("./transactionRulesResult"), exports);
__exportStar(require("./transferData"), exports);
__exportStar(require("./transferEvent"), exports);
__exportStar(require("./transferNotificationRequest"), exports);
__exportStar(require("./transferNotificationTransferTracking"), exports);
__exportStar(require("./transferNotificationValidationFact"), exports);
__exportStar(require("./uKLocalAccountIdentification"), exports);
__exportStar(require("./uSLocalAccountIdentification"), exports);
const aULocalAccountIdentification_1 = require("./aULocalAccountIdentification");
const additionalBankIdentification_1 = require("./additionalBankIdentification");
const address_1 = require("./address");
const amount_1 = require("./amount");
const amountAdjustment_1 = require("./amountAdjustment");
const bRLocalAccountIdentification_1 = require("./bRLocalAccountIdentification");
const balanceMutation_1 = require("./balanceMutation");
const balancePlatformNotificationResponse_1 = require("./balancePlatformNotificationResponse");
const bankAccountV3_1 = require("./bankAccountV3");
const cALocalAccountIdentification_1 = require("./cALocalAccountIdentification");
const cZLocalAccountIdentification_1 = require("./cZLocalAccountIdentification");
const counterpartyV3_1 = require("./counterpartyV3");
const dKLocalAccountIdentification_1 = require("./dKLocalAccountIdentification");
const hULocalAccountIdentification_1 = require("./hULocalAccountIdentification");
const ibanAccountIdentification_1 = require("./ibanAccountIdentification");
const merchantData_1 = require("./merchantData");
const nOLocalAccountIdentification_1 = require("./nOLocalAccountIdentification");
const nameLocation_1 = require("./nameLocation");
const numberAndBicAccountIdentification_1 = require("./numberAndBicAccountIdentification");
const pLLocalAccountIdentification_1 = require("./pLLocalAccountIdentification");
const partyIdentification_1 = require("./partyIdentification");
const paymentInstrument_1 = require("./paymentInstrument");
const relayedAuthorisationData_1 = require("./relayedAuthorisationData");
const resource_1 = require("./resource");
const resourceReference_1 = require("./resourceReference");
const sELocalAccountIdentification_1 = require("./sELocalAccountIdentification");
const sGLocalAccountIdentification_1 = require("./sGLocalAccountIdentification");
const transactionEventViolation_1 = require("./transactionEventViolation");
const transactionRuleReference_1 = require("./transactionRuleReference");
const transactionRuleSource_1 = require("./transactionRuleSource");
const transactionRulesResult_1 = require("./transactionRulesResult");
const transferData_1 = require("./transferData");
const transferEvent_1 = require("./transferEvent");
const transferNotificationRequest_1 = require("./transferNotificationRequest");
const transferNotificationTransferTracking_1 = require("./transferNotificationTransferTracking");
const transferNotificationValidationFact_1 = require("./transferNotificationValidationFact");
const uKLocalAccountIdentification_1 = require("./uKLocalAccountIdentification");
const uSLocalAccountIdentification_1 = require("./uSLocalAccountIdentification");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AULocalAccountIdentification.TypeEnum": aULocalAccountIdentification_1.AULocalAccountIdentification.TypeEnum,
    "AdditionalBankIdentification.TypeEnum": additionalBankIdentification_1.AdditionalBankIdentification.TypeEnum,
    "AmountAdjustment.AmountAdjustmentTypeEnum": amountAdjustment_1.AmountAdjustment.AmountAdjustmentTypeEnum,
    "BRLocalAccountIdentification.TypeEnum": bRLocalAccountIdentification_1.BRLocalAccountIdentification.TypeEnum,
    "CALocalAccountIdentification.AccountTypeEnum": cALocalAccountIdentification_1.CALocalAccountIdentification.AccountTypeEnum,
    "CALocalAccountIdentification.TypeEnum": cALocalAccountIdentification_1.CALocalAccountIdentification.TypeEnum,
    "CZLocalAccountIdentification.TypeEnum": cZLocalAccountIdentification_1.CZLocalAccountIdentification.TypeEnum,
    "DKLocalAccountIdentification.TypeEnum": dKLocalAccountIdentification_1.DKLocalAccountIdentification.TypeEnum,
    "HULocalAccountIdentification.TypeEnum": hULocalAccountIdentification_1.HULocalAccountIdentification.TypeEnum,
    "IbanAccountIdentification.TypeEnum": ibanAccountIdentification_1.IbanAccountIdentification.TypeEnum,
    "NOLocalAccountIdentification.TypeEnum": nOLocalAccountIdentification_1.NOLocalAccountIdentification.TypeEnum,
    "NumberAndBicAccountIdentification.TypeEnum": numberAndBicAccountIdentification_1.NumberAndBicAccountIdentification.TypeEnum,
    "PLLocalAccountIdentification.TypeEnum": pLLocalAccountIdentification_1.PLLocalAccountIdentification.TypeEnum,
    "PartyIdentification.TypeEnum": partyIdentification_1.PartyIdentification.TypeEnum,
    "SELocalAccountIdentification.TypeEnum": sELocalAccountIdentification_1.SELocalAccountIdentification.TypeEnum,
    "SGLocalAccountIdentification.TypeEnum": sGLocalAccountIdentification_1.SGLocalAccountIdentification.TypeEnum,
    "TransferData.CategoryEnum": transferData_1.TransferData.CategoryEnum,
    "TransferData.DirectionEnum": transferData_1.TransferData.DirectionEnum,
    "TransferData.PanEntryModeEnum": transferData_1.TransferData.PanEntryModeEnum,
    "TransferData.PriorityEnum": transferData_1.TransferData.PriorityEnum,
    "TransferData.ProcessingTypeEnum": transferData_1.TransferData.ProcessingTypeEnum,
    "TransferData.ReasonEnum": transferData_1.TransferData.ReasonEnum,
    "TransferData.StatusEnum": transferData_1.TransferData.StatusEnum,
    "TransferData.TypeEnum": transferData_1.TransferData.TypeEnum,
    "TransferEvent.ReasonEnum": transferEvent_1.TransferEvent.ReasonEnum,
    "TransferEvent.StatusEnum": transferEvent_1.TransferEvent.StatusEnum,
    "TransferEvent.TypeEnum": transferEvent_1.TransferEvent.TypeEnum,
    "TransferNotificationRequest.TypeEnum": transferNotificationRequest_1.TransferNotificationRequest.TypeEnum,
    "TransferNotificationTransferTracking.StatusEnum": transferNotificationTransferTracking_1.TransferNotificationTransferTracking.StatusEnum,
    "UKLocalAccountIdentification.TypeEnum": uKLocalAccountIdentification_1.UKLocalAccountIdentification.TypeEnum,
    "USLocalAccountIdentification.AccountTypeEnum": uSLocalAccountIdentification_1.USLocalAccountIdentification.AccountTypeEnum,
    "USLocalAccountIdentification.TypeEnum": uSLocalAccountIdentification_1.USLocalAccountIdentification.TypeEnum,
};
let typeMap = {
    "AULocalAccountIdentification": aULocalAccountIdentification_1.AULocalAccountIdentification,
    "AdditionalBankIdentification": additionalBankIdentification_1.AdditionalBankIdentification,
    "Address": address_1.Address,
    "Amount": amount_1.Amount,
    "AmountAdjustment": amountAdjustment_1.AmountAdjustment,
    "BRLocalAccountIdentification": bRLocalAccountIdentification_1.BRLocalAccountIdentification,
    "BalanceMutation": balanceMutation_1.BalanceMutation,
    "BalancePlatformNotificationResponse": balancePlatformNotificationResponse_1.BalancePlatformNotificationResponse,
    "BankAccountV3": bankAccountV3_1.BankAccountV3,
    "CALocalAccountIdentification": cALocalAccountIdentification_1.CALocalAccountIdentification,
    "CZLocalAccountIdentification": cZLocalAccountIdentification_1.CZLocalAccountIdentification,
    "CounterpartyV3": counterpartyV3_1.CounterpartyV3,
    "DKLocalAccountIdentification": dKLocalAccountIdentification_1.DKLocalAccountIdentification,
    "HULocalAccountIdentification": hULocalAccountIdentification_1.HULocalAccountIdentification,
    "IbanAccountIdentification": ibanAccountIdentification_1.IbanAccountIdentification,
    "MerchantData": merchantData_1.MerchantData,
    "NOLocalAccountIdentification": nOLocalAccountIdentification_1.NOLocalAccountIdentification,
    "NameLocation": nameLocation_1.NameLocation,
    "NumberAndBicAccountIdentification": numberAndBicAccountIdentification_1.NumberAndBicAccountIdentification,
    "PLLocalAccountIdentification": pLLocalAccountIdentification_1.PLLocalAccountIdentification,
    "PartyIdentification": partyIdentification_1.PartyIdentification,
    "PaymentInstrument": paymentInstrument_1.PaymentInstrument,
    "RelayedAuthorisationData": relayedAuthorisationData_1.RelayedAuthorisationData,
    "Resource": resource_1.Resource,
    "ResourceReference": resourceReference_1.ResourceReference,
    "SELocalAccountIdentification": sELocalAccountIdentification_1.SELocalAccountIdentification,
    "SGLocalAccountIdentification": sGLocalAccountIdentification_1.SGLocalAccountIdentification,
    "TransactionEventViolation": transactionEventViolation_1.TransactionEventViolation,
    "TransactionRuleReference": transactionRuleReference_1.TransactionRuleReference,
    "TransactionRuleSource": transactionRuleSource_1.TransactionRuleSource,
    "TransactionRulesResult": transactionRulesResult_1.TransactionRulesResult,
    "TransferData": transferData_1.TransferData,
    "TransferEvent": transferEvent_1.TransferEvent,
    "TransferNotificationRequest": transferNotificationRequest_1.TransferNotificationRequest,
    "TransferNotificationTransferTracking": transferNotificationTransferTracking_1.TransferNotificationTransferTracking,
    "TransferNotificationValidationFact": transferNotificationValidationFact_1.TransferNotificationValidationFact,
    "UKLocalAccountIdentification": uKLocalAccountIdentification_1.UKLocalAccountIdentification,
    "USLocalAccountIdentification": uSLocalAccountIdentification_1.USLocalAccountIdentification,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map