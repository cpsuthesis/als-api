"use strict";
/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2021 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardAcquisitionTransaction = void 0;
/**
 * Terminal API
 * Definition of Terminal API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
class CardAcquisitionTransaction {
    static getAttributeTypeMap() {
        return CardAcquisitionTransaction.attributeTypeMap;
    }
}
exports.CardAcquisitionTransaction = CardAcquisitionTransaction;
CardAcquisitionTransaction.discriminator = undefined;
CardAcquisitionTransaction.attributeTypeMap = [
    {
        "name": "AllowedLoyaltyBrand",
        "baseName": "AllowedLoyaltyBrand",
        "type": "Array<string>"
    },
    {
        "name": "AllowedPaymentBrand",
        "baseName": "AllowedPaymentBrand",
        "type": "Array<string>"
    },
    {
        "name": "CashBackFlag",
        "baseName": "CashBackFlag",
        "type": "boolean"
    },
    {
        "name": "CustomerLanguage",
        "baseName": "CustomerLanguage",
        "type": "string"
    },
    {
        "name": "ForceCustomerSelectionFlag",
        "baseName": "ForceCustomerSelectionFlag",
        "type": "boolean"
    },
    {
        "name": "ForceEntryMode",
        "baseName": "ForceEntryMode",
        "type": "Array<CardAcquisitionTransaction.ForceEntryModeEnum>"
    },
    {
        "name": "LoyaltyHandling",
        "baseName": "LoyaltyHandling",
        "type": "CardAcquisitionTransaction.LoyaltyHandlingEnum"
    },
    {
        "name": "PaymentType",
        "baseName": "PaymentType",
        "type": "CardAcquisitionTransaction.PaymentTypeEnum"
    },
    {
        "name": "TotalAmount",
        "baseName": "TotalAmount",
        "type": "number"
    }
];
(function (CardAcquisitionTransaction) {
    let ForceEntryModeEnum;
    (function (ForceEntryModeEnum) {
        ForceEntryModeEnum[ForceEntryModeEnum["CheckReader"] = 'CheckReader'] = "CheckReader";
        ForceEntryModeEnum[ForceEntryModeEnum["Contactless"] = 'Contactless'] = "Contactless";
        ForceEntryModeEnum[ForceEntryModeEnum["File"] = 'File'] = "File";
        ForceEntryModeEnum[ForceEntryModeEnum["Icc"] = 'ICC'] = "Icc";
        ForceEntryModeEnum[ForceEntryModeEnum["Keyed"] = 'Keyed'] = "Keyed";
        ForceEntryModeEnum[ForceEntryModeEnum["MagStripe"] = 'MagStripe'] = "MagStripe";
        ForceEntryModeEnum[ForceEntryModeEnum["Manual"] = 'Manual'] = "Manual";
        ForceEntryModeEnum[ForceEntryModeEnum["Rfid"] = 'RFID'] = "Rfid";
        ForceEntryModeEnum[ForceEntryModeEnum["Scanned"] = 'Scanned'] = "Scanned";
        ForceEntryModeEnum[ForceEntryModeEnum["SynchronousIcc"] = 'SynchronousICC'] = "SynchronousIcc";
        ForceEntryModeEnum[ForceEntryModeEnum["Tapped"] = 'Tapped'] = "Tapped";
    })(ForceEntryModeEnum = CardAcquisitionTransaction.ForceEntryModeEnum || (CardAcquisitionTransaction.ForceEntryModeEnum = {}));
    let LoyaltyHandlingEnum;
    (function (LoyaltyHandlingEnum) {
        LoyaltyHandlingEnum[LoyaltyHandlingEnum["Allowed"] = 'Allowed'] = "Allowed";
        LoyaltyHandlingEnum[LoyaltyHandlingEnum["Forbidden"] = 'Forbidden'] = "Forbidden";
        LoyaltyHandlingEnum[LoyaltyHandlingEnum["Processed"] = 'Processed'] = "Processed";
        LoyaltyHandlingEnum[LoyaltyHandlingEnum["Proposed"] = 'Proposed'] = "Proposed";
        LoyaltyHandlingEnum[LoyaltyHandlingEnum["Required"] = 'Required'] = "Required";
    })(LoyaltyHandlingEnum = CardAcquisitionTransaction.LoyaltyHandlingEnum || (CardAcquisitionTransaction.LoyaltyHandlingEnum = {}));
    let PaymentTypeEnum;
    (function (PaymentTypeEnum) {
        PaymentTypeEnum[PaymentTypeEnum["CashAdvance"] = 'CashAdvance'] = "CashAdvance";
        PaymentTypeEnum[PaymentTypeEnum["CashDeposit"] = 'CashDeposit'] = "CashDeposit";
        PaymentTypeEnum[PaymentTypeEnum["Completion"] = 'Completion'] = "Completion";
        PaymentTypeEnum[PaymentTypeEnum["FirstReservation"] = 'FirstReservation'] = "FirstReservation";
        PaymentTypeEnum[PaymentTypeEnum["Instalment"] = 'Instalment'] = "Instalment";
        PaymentTypeEnum[PaymentTypeEnum["IssuerInstalment"] = 'IssuerInstalment'] = "IssuerInstalment";
        PaymentTypeEnum[PaymentTypeEnum["Normal"] = 'Normal'] = "Normal";
        PaymentTypeEnum[PaymentTypeEnum["OneTimeReservation"] = 'OneTimeReservation'] = "OneTimeReservation";
        PaymentTypeEnum[PaymentTypeEnum["PaidOut"] = 'PaidOut'] = "PaidOut";
        PaymentTypeEnum[PaymentTypeEnum["Recurring"] = 'Recurring'] = "Recurring";
        PaymentTypeEnum[PaymentTypeEnum["Refund"] = 'Refund'] = "Refund";
        PaymentTypeEnum[PaymentTypeEnum["UpdateReservation"] = 'UpdateReservation'] = "UpdateReservation";
    })(PaymentTypeEnum = CardAcquisitionTransaction.PaymentTypeEnum || (CardAcquisitionTransaction.PaymentTypeEnum = {}));
})(CardAcquisitionTransaction = exports.CardAcquisitionTransaction || (exports.CardAcquisitionTransaction = {}));
//# sourceMappingURL=cardAcquisitionTransaction.js.map