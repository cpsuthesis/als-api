"use strict";
/*
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./aULocalAccountIdentification"), exports);
__exportStar(require("./accountHolder"), exports);
__exportStar(require("./accountHolderCapability"), exports);
__exportStar(require("./accountHolderInfo"), exports);
__exportStar(require("./accountSupportingEntityCapability"), exports);
__exportStar(require("./activeNetworkTokensRestriction"), exports);
__exportStar(require("./additionalBankIdentification"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./authentication"), exports);
__exportStar(require("./balance"), exports);
__exportStar(require("./balanceAccount"), exports);
__exportStar(require("./balanceAccountBase"), exports);
__exportStar(require("./balanceAccountInfo"), exports);
__exportStar(require("./balanceAccountUpdateRequest"), exports);
__exportStar(require("./balancePlatform"), exports);
__exportStar(require("./balanceSweepConfigurationsResponse"), exports);
__exportStar(require("./bankAccountIdentificationValidationRequest"), exports);
__exportStar(require("./brandVariantsRestriction"), exports);
__exportStar(require("./bulkAddress"), exports);
__exportStar(require("./cALocalAccountIdentification"), exports);
__exportStar(require("./cZLocalAccountIdentification"), exports);
__exportStar(require("./capabilitySettings"), exports);
__exportStar(require("./capitalBalance"), exports);
__exportStar(require("./capitalGrantAccount"), exports);
__exportStar(require("./card"), exports);
__exportStar(require("./cardConfiguration"), exports);
__exportStar(require("./cardInfo"), exports);
__exportStar(require("./contactDetails"), exports);
__exportStar(require("./countriesRestriction"), exports);
__exportStar(require("./cronSweepSchedule"), exports);
__exportStar(require("./dayOfWeekRestriction"), exports);
__exportStar(require("./deliveryAddress"), exports);
__exportStar(require("./deliveryContact"), exports);
__exportStar(require("./differentCurrenciesRestriction"), exports);
__exportStar(require("./duration"), exports);
__exportStar(require("./entryModesRestriction"), exports);
__exportStar(require("./expiry"), exports);
__exportStar(require("./fee"), exports);
__exportStar(require("./grantLimit"), exports);
__exportStar(require("./grantOffer"), exports);
__exportStar(require("./grantOffers"), exports);
__exportStar(require("./hULocalAccountIdentification"), exports);
__exportStar(require("./ibanAccountIdentification"), exports);
__exportStar(require("./internationalTransactionRestriction"), exports);
__exportStar(require("./invalidField"), exports);
__exportStar(require("./jSONObject"), exports);
__exportStar(require("./jSONPath"), exports);
__exportStar(require("./matchingTransactionsRestriction"), exports);
__exportStar(require("./mccsRestriction"), exports);
__exportStar(require("./merchantAcquirerPair"), exports);
__exportStar(require("./merchantNamesRestriction"), exports);
__exportStar(require("./merchantsRestriction"), exports);
__exportStar(require("./nOLocalAccountIdentification"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./numberAndBicAccountIdentification"), exports);
__exportStar(require("./pLLocalAccountIdentification"), exports);
__exportStar(require("./paginatedAccountHoldersResponse"), exports);
__exportStar(require("./paginatedBalanceAccountsResponse"), exports);
__exportStar(require("./paginatedPaymentInstrumentsResponse"), exports);
__exportStar(require("./paymentInstrument"), exports);
__exportStar(require("./paymentInstrumentGroup"), exports);
__exportStar(require("./paymentInstrumentGroupInfo"), exports);
__exportStar(require("./paymentInstrumentInfo"), exports);
__exportStar(require("./paymentInstrumentRevealInfo"), exports);
__exportStar(require("./paymentInstrumentUpdateRequest"), exports);
__exportStar(require("./phone"), exports);
__exportStar(require("./phoneNumber"), exports);
__exportStar(require("./processingTypesRestriction"), exports);
__exportStar(require("./repayment"), exports);
__exportStar(require("./repaymentTerm"), exports);
__exportStar(require("./restServiceError"), exports);
__exportStar(require("./sELocalAccountIdentification"), exports);
__exportStar(require("./sGLocalAccountIdentification"), exports);
__exportStar(require("./stringMatch"), exports);
__exportStar(require("./sweepConfigurationV2"), exports);
__exportStar(require("./sweepCounterparty"), exports);
__exportStar(require("./sweepSchedule"), exports);
__exportStar(require("./thresholdRepayment"), exports);
__exportStar(require("./timeOfDay"), exports);
__exportStar(require("./timeOfDayRestriction"), exports);
__exportStar(require("./totalAmountRestriction"), exports);
__exportStar(require("./transactionRule"), exports);
__exportStar(require("./transactionRuleEntityKey"), exports);
__exportStar(require("./transactionRuleInfo"), exports);
__exportStar(require("./transactionRuleInterval"), exports);
__exportStar(require("./transactionRuleResponse"), exports);
__exportStar(require("./transactionRuleRestrictions"), exports);
__exportStar(require("./transactionRulesResponse"), exports);
__exportStar(require("./uKLocalAccountIdentification"), exports);
__exportStar(require("./uSLocalAccountIdentification"), exports);
__exportStar(require("./updatePaymentInstrument"), exports);
__exportStar(require("./verificationDeadline"), exports);
const aULocalAccountIdentification_1 = require("./aULocalAccountIdentification");
const accountHolder_1 = require("./accountHolder");
const accountHolderCapability_1 = require("./accountHolderCapability");
const accountHolderInfo_1 = require("./accountHolderInfo");
const accountSupportingEntityCapability_1 = require("./accountSupportingEntityCapability");
const activeNetworkTokensRestriction_1 = require("./activeNetworkTokensRestriction");
const additionalBankIdentification_1 = require("./additionalBankIdentification");
const address_1 = require("./address");
const amount_1 = require("./amount");
const authentication_1 = require("./authentication");
const balance_1 = require("./balance");
const balanceAccount_1 = require("./balanceAccount");
const balanceAccountBase_1 = require("./balanceAccountBase");
const balanceAccountInfo_1 = require("./balanceAccountInfo");
const balanceAccountUpdateRequest_1 = require("./balanceAccountUpdateRequest");
const balancePlatform_1 = require("./balancePlatform");
const balanceSweepConfigurationsResponse_1 = require("./balanceSweepConfigurationsResponse");
const bankAccountIdentificationValidationRequest_1 = require("./bankAccountIdentificationValidationRequest");
const brandVariantsRestriction_1 = require("./brandVariantsRestriction");
const bulkAddress_1 = require("./bulkAddress");
const cALocalAccountIdentification_1 = require("./cALocalAccountIdentification");
const cZLocalAccountIdentification_1 = require("./cZLocalAccountIdentification");
const capabilitySettings_1 = require("./capabilitySettings");
const capitalBalance_1 = require("./capitalBalance");
const capitalGrantAccount_1 = require("./capitalGrantAccount");
const card_1 = require("./card");
const cardConfiguration_1 = require("./cardConfiguration");
const cardInfo_1 = require("./cardInfo");
const contactDetails_1 = require("./contactDetails");
const countriesRestriction_1 = require("./countriesRestriction");
const cronSweepSchedule_1 = require("./cronSweepSchedule");
const dayOfWeekRestriction_1 = require("./dayOfWeekRestriction");
const deliveryAddress_1 = require("./deliveryAddress");
const deliveryContact_1 = require("./deliveryContact");
const differentCurrenciesRestriction_1 = require("./differentCurrenciesRestriction");
const duration_1 = require("./duration");
const entryModesRestriction_1 = require("./entryModesRestriction");
const expiry_1 = require("./expiry");
const fee_1 = require("./fee");
const grantLimit_1 = require("./grantLimit");
const grantOffer_1 = require("./grantOffer");
const grantOffers_1 = require("./grantOffers");
const hULocalAccountIdentification_1 = require("./hULocalAccountIdentification");
const ibanAccountIdentification_1 = require("./ibanAccountIdentification");
const internationalTransactionRestriction_1 = require("./internationalTransactionRestriction");
const invalidField_1 = require("./invalidField");
const jSONObject_1 = require("./jSONObject");
const jSONPath_1 = require("./jSONPath");
const matchingTransactionsRestriction_1 = require("./matchingTransactionsRestriction");
const mccsRestriction_1 = require("./mccsRestriction");
const merchantAcquirerPair_1 = require("./merchantAcquirerPair");
const merchantNamesRestriction_1 = require("./merchantNamesRestriction");
const merchantsRestriction_1 = require("./merchantsRestriction");
const nOLocalAccountIdentification_1 = require("./nOLocalAccountIdentification");
const name_1 = require("./name");
const numberAndBicAccountIdentification_1 = require("./numberAndBicAccountIdentification");
const pLLocalAccountIdentification_1 = require("./pLLocalAccountIdentification");
const paginatedAccountHoldersResponse_1 = require("./paginatedAccountHoldersResponse");
const paginatedBalanceAccountsResponse_1 = require("./paginatedBalanceAccountsResponse");
const paginatedPaymentInstrumentsResponse_1 = require("./paginatedPaymentInstrumentsResponse");
const paymentInstrument_1 = require("./paymentInstrument");
const paymentInstrumentGroup_1 = require("./paymentInstrumentGroup");
const paymentInstrumentGroupInfo_1 = require("./paymentInstrumentGroupInfo");
const paymentInstrumentInfo_1 = require("./paymentInstrumentInfo");
const paymentInstrumentRevealInfo_1 = require("./paymentInstrumentRevealInfo");
const paymentInstrumentUpdateRequest_1 = require("./paymentInstrumentUpdateRequest");
const phone_1 = require("./phone");
const phoneNumber_1 = require("./phoneNumber");
const processingTypesRestriction_1 = require("./processingTypesRestriction");
const repayment_1 = require("./repayment");
const repaymentTerm_1 = require("./repaymentTerm");
const restServiceError_1 = require("./restServiceError");
const sELocalAccountIdentification_1 = require("./sELocalAccountIdentification");
const sGLocalAccountIdentification_1 = require("./sGLocalAccountIdentification");
const stringMatch_1 = require("./stringMatch");
const sweepConfigurationV2_1 = require("./sweepConfigurationV2");
const sweepCounterparty_1 = require("./sweepCounterparty");
const sweepSchedule_1 = require("./sweepSchedule");
const thresholdRepayment_1 = require("./thresholdRepayment");
const timeOfDay_1 = require("./timeOfDay");
const timeOfDayRestriction_1 = require("./timeOfDayRestriction");
const totalAmountRestriction_1 = require("./totalAmountRestriction");
const transactionRule_1 = require("./transactionRule");
const transactionRuleEntityKey_1 = require("./transactionRuleEntityKey");
const transactionRuleInfo_1 = require("./transactionRuleInfo");
const transactionRuleInterval_1 = require("./transactionRuleInterval");
const transactionRuleResponse_1 = require("./transactionRuleResponse");
const transactionRuleRestrictions_1 = require("./transactionRuleRestrictions");
const transactionRulesResponse_1 = require("./transactionRulesResponse");
const uKLocalAccountIdentification_1 = require("./uKLocalAccountIdentification");
const uSLocalAccountIdentification_1 = require("./uSLocalAccountIdentification");
const updatePaymentInstrument_1 = require("./updatePaymentInstrument");
const verificationDeadline_1 = require("./verificationDeadline");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AULocalAccountIdentification.TypeEnum": aULocalAccountIdentification_1.AULocalAccountIdentification.TypeEnum,
    "AccountHolder.StatusEnum": accountHolder_1.AccountHolder.StatusEnum,
    "AccountHolderCapability.AllowedLevelEnum": accountHolderCapability_1.AccountHolderCapability.AllowedLevelEnum,
    "AccountHolderCapability.RequestedLevelEnum": accountHolderCapability_1.AccountHolderCapability.RequestedLevelEnum,
    "AccountHolderCapability.VerificationStatusEnum": accountHolderCapability_1.AccountHolderCapability.VerificationStatusEnum,
    "AccountSupportingEntityCapability.AllowedLevelEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.AllowedLevelEnum,
    "AccountSupportingEntityCapability.RequestedLevelEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.RequestedLevelEnum,
    "AccountSupportingEntityCapability.VerificationStatusEnum": accountSupportingEntityCapability_1.AccountSupportingEntityCapability.VerificationStatusEnum,
    "AdditionalBankIdentification.TypeEnum": additionalBankIdentification_1.AdditionalBankIdentification.TypeEnum,
    "BalanceAccount.StatusEnum": balanceAccount_1.BalanceAccount.StatusEnum,
    "BalanceAccountBase.StatusEnum": balanceAccountBase_1.BalanceAccountBase.StatusEnum,
    "BalanceAccountUpdateRequest.StatusEnum": balanceAccountUpdateRequest_1.BalanceAccountUpdateRequest.StatusEnum,
    "CALocalAccountIdentification.AccountTypeEnum": cALocalAccountIdentification_1.CALocalAccountIdentification.AccountTypeEnum,
    "CALocalAccountIdentification.TypeEnum": cALocalAccountIdentification_1.CALocalAccountIdentification.TypeEnum,
    "CZLocalAccountIdentification.TypeEnum": cZLocalAccountIdentification_1.CZLocalAccountIdentification.TypeEnum,
    "CapabilitySettings.FundingSourceEnum": capabilitySettings_1.CapabilitySettings.FundingSourceEnum,
    "CapabilitySettings.IntervalEnum": capabilitySettings_1.CapabilitySettings.IntervalEnum,
    "Card.FormFactorEnum": card_1.Card.FormFactorEnum,
    "CardInfo.FormFactorEnum": cardInfo_1.CardInfo.FormFactorEnum,
    "CronSweepSchedule.TypeEnum": cronSweepSchedule_1.CronSweepSchedule.TypeEnum,
    "DayOfWeekRestriction.ValueEnum": dayOfWeekRestriction_1.DayOfWeekRestriction.ValueEnum,
    "Duration.UnitEnum": duration_1.Duration.UnitEnum,
    "EntryModesRestriction.ValueEnum": entryModesRestriction_1.EntryModesRestriction.ValueEnum,
    "GrantOffer.ContractTypeEnum": grantOffer_1.GrantOffer.ContractTypeEnum,
    "HULocalAccountIdentification.TypeEnum": hULocalAccountIdentification_1.HULocalAccountIdentification.TypeEnum,
    "IbanAccountIdentification.TypeEnum": ibanAccountIdentification_1.IbanAccountIdentification.TypeEnum,
    "NOLocalAccountIdentification.TypeEnum": nOLocalAccountIdentification_1.NOLocalAccountIdentification.TypeEnum,
    "NumberAndBicAccountIdentification.TypeEnum": numberAndBicAccountIdentification_1.NumberAndBicAccountIdentification.TypeEnum,
    "PLLocalAccountIdentification.TypeEnum": pLLocalAccountIdentification_1.PLLocalAccountIdentification.TypeEnum,
    "PaymentInstrument.StatusEnum": paymentInstrument_1.PaymentInstrument.StatusEnum,
    "PaymentInstrument.StatusReasonEnum": paymentInstrument_1.PaymentInstrument.StatusReasonEnum,
    "PaymentInstrument.TypeEnum": paymentInstrument_1.PaymentInstrument.TypeEnum,
    "PaymentInstrumentInfo.StatusEnum": paymentInstrumentInfo_1.PaymentInstrumentInfo.StatusEnum,
    "PaymentInstrumentInfo.StatusReasonEnum": paymentInstrumentInfo_1.PaymentInstrumentInfo.StatusReasonEnum,
    "PaymentInstrumentInfo.TypeEnum": paymentInstrumentInfo_1.PaymentInstrumentInfo.TypeEnum,
    "PaymentInstrumentUpdateRequest.StatusEnum": paymentInstrumentUpdateRequest_1.PaymentInstrumentUpdateRequest.StatusEnum,
    "PaymentInstrumentUpdateRequest.StatusReasonEnum": paymentInstrumentUpdateRequest_1.PaymentInstrumentUpdateRequest.StatusReasonEnum,
    "Phone.TypeEnum": phone_1.Phone.TypeEnum,
    "PhoneNumber.PhoneTypeEnum": phoneNumber_1.PhoneNumber.PhoneTypeEnum,
    "ProcessingTypesRestriction.ValueEnum": processingTypesRestriction_1.ProcessingTypesRestriction.ValueEnum,
    "SELocalAccountIdentification.TypeEnum": sELocalAccountIdentification_1.SELocalAccountIdentification.TypeEnum,
    "SGLocalAccountIdentification.TypeEnum": sGLocalAccountIdentification_1.SGLocalAccountIdentification.TypeEnum,
    "StringMatch.OperationEnum": stringMatch_1.StringMatch.OperationEnum,
    "SweepConfigurationV2.CategoryEnum": sweepConfigurationV2_1.SweepConfigurationV2.CategoryEnum,
    "SweepConfigurationV2.PrioritiesEnum": sweepConfigurationV2_1.SweepConfigurationV2.PrioritiesEnum,
    "SweepConfigurationV2.ReasonEnum": sweepConfigurationV2_1.SweepConfigurationV2.ReasonEnum,
    "SweepConfigurationV2.StatusEnum": sweepConfigurationV2_1.SweepConfigurationV2.StatusEnum,
    "SweepConfigurationV2.TypeEnum": sweepConfigurationV2_1.SweepConfigurationV2.TypeEnum,
    "SweepSchedule.TypeEnum": sweepSchedule_1.SweepSchedule.TypeEnum,
    "TransactionRule.OutcomeTypeEnum": transactionRule_1.TransactionRule.OutcomeTypeEnum,
    "TransactionRule.RequestTypeEnum": transactionRule_1.TransactionRule.RequestTypeEnum,
    "TransactionRule.StatusEnum": transactionRule_1.TransactionRule.StatusEnum,
    "TransactionRule.TypeEnum": transactionRule_1.TransactionRule.TypeEnum,
    "TransactionRuleInfo.OutcomeTypeEnum": transactionRuleInfo_1.TransactionRuleInfo.OutcomeTypeEnum,
    "TransactionRuleInfo.RequestTypeEnum": transactionRuleInfo_1.TransactionRuleInfo.RequestTypeEnum,
    "TransactionRuleInfo.StatusEnum": transactionRuleInfo_1.TransactionRuleInfo.StatusEnum,
    "TransactionRuleInfo.TypeEnum": transactionRuleInfo_1.TransactionRuleInfo.TypeEnum,
    "TransactionRuleInterval.DayOfWeekEnum": transactionRuleInterval_1.TransactionRuleInterval.DayOfWeekEnum,
    "TransactionRuleInterval.TypeEnum": transactionRuleInterval_1.TransactionRuleInterval.TypeEnum,
    "UKLocalAccountIdentification.TypeEnum": uKLocalAccountIdentification_1.UKLocalAccountIdentification.TypeEnum,
    "USLocalAccountIdentification.AccountTypeEnum": uSLocalAccountIdentification_1.USLocalAccountIdentification.AccountTypeEnum,
    "USLocalAccountIdentification.TypeEnum": uSLocalAccountIdentification_1.USLocalAccountIdentification.TypeEnum,
    "UpdatePaymentInstrument.StatusEnum": updatePaymentInstrument_1.UpdatePaymentInstrument.StatusEnum,
    "UpdatePaymentInstrument.StatusReasonEnum": updatePaymentInstrument_1.UpdatePaymentInstrument.StatusReasonEnum,
    "UpdatePaymentInstrument.TypeEnum": updatePaymentInstrument_1.UpdatePaymentInstrument.TypeEnum,
    "VerificationDeadline.CapabilitiesEnum": verificationDeadline_1.VerificationDeadline.CapabilitiesEnum,
};
let typeMap = {
    "AULocalAccountIdentification": aULocalAccountIdentification_1.AULocalAccountIdentification,
    "AccountHolder": accountHolder_1.AccountHolder,
    "AccountHolderCapability": accountHolderCapability_1.AccountHolderCapability,
    "AccountHolderInfo": accountHolderInfo_1.AccountHolderInfo,
    "AccountSupportingEntityCapability": accountSupportingEntityCapability_1.AccountSupportingEntityCapability,
    "ActiveNetworkTokensRestriction": activeNetworkTokensRestriction_1.ActiveNetworkTokensRestriction,
    "AdditionalBankIdentification": additionalBankIdentification_1.AdditionalBankIdentification,
    "Address": address_1.Address,
    "Amount": amount_1.Amount,
    "Authentication": authentication_1.Authentication,
    "Balance": balance_1.Balance,
    "BalanceAccount": balanceAccount_1.BalanceAccount,
    "BalanceAccountBase": balanceAccountBase_1.BalanceAccountBase,
    "BalanceAccountInfo": balanceAccountInfo_1.BalanceAccountInfo,
    "BalanceAccountUpdateRequest": balanceAccountUpdateRequest_1.BalanceAccountUpdateRequest,
    "BalancePlatform": balancePlatform_1.BalancePlatform,
    "BalanceSweepConfigurationsResponse": balanceSweepConfigurationsResponse_1.BalanceSweepConfigurationsResponse,
    "BankAccountIdentificationValidationRequest": bankAccountIdentificationValidationRequest_1.BankAccountIdentificationValidationRequest,
    "BrandVariantsRestriction": brandVariantsRestriction_1.BrandVariantsRestriction,
    "BulkAddress": bulkAddress_1.BulkAddress,
    "CALocalAccountIdentification": cALocalAccountIdentification_1.CALocalAccountIdentification,
    "CZLocalAccountIdentification": cZLocalAccountIdentification_1.CZLocalAccountIdentification,
    "CapabilitySettings": capabilitySettings_1.CapabilitySettings,
    "CapitalBalance": capitalBalance_1.CapitalBalance,
    "CapitalGrantAccount": capitalGrantAccount_1.CapitalGrantAccount,
    "Card": card_1.Card,
    "CardConfiguration": cardConfiguration_1.CardConfiguration,
    "CardInfo": cardInfo_1.CardInfo,
    "ContactDetails": contactDetails_1.ContactDetails,
    "CountriesRestriction": countriesRestriction_1.CountriesRestriction,
    "CronSweepSchedule": cronSweepSchedule_1.CronSweepSchedule,
    "DayOfWeekRestriction": dayOfWeekRestriction_1.DayOfWeekRestriction,
    "DeliveryAddress": deliveryAddress_1.DeliveryAddress,
    "DeliveryContact": deliveryContact_1.DeliveryContact,
    "DifferentCurrenciesRestriction": differentCurrenciesRestriction_1.DifferentCurrenciesRestriction,
    "Duration": duration_1.Duration,
    "EntryModesRestriction": entryModesRestriction_1.EntryModesRestriction,
    "Expiry": expiry_1.Expiry,
    "Fee": fee_1.Fee,
    "GrantLimit": grantLimit_1.GrantLimit,
    "GrantOffer": grantOffer_1.GrantOffer,
    "GrantOffers": grantOffers_1.GrantOffers,
    "HULocalAccountIdentification": hULocalAccountIdentification_1.HULocalAccountIdentification,
    "IbanAccountIdentification": ibanAccountIdentification_1.IbanAccountIdentification,
    "InternationalTransactionRestriction": internationalTransactionRestriction_1.InternationalTransactionRestriction,
    "InvalidField": invalidField_1.InvalidField,
    "JSONObject": jSONObject_1.JSONObject,
    "JSONPath": jSONPath_1.JSONPath,
    "MatchingTransactionsRestriction": matchingTransactionsRestriction_1.MatchingTransactionsRestriction,
    "MccsRestriction": mccsRestriction_1.MccsRestriction,
    "MerchantAcquirerPair": merchantAcquirerPair_1.MerchantAcquirerPair,
    "MerchantNamesRestriction": merchantNamesRestriction_1.MerchantNamesRestriction,
    "MerchantsRestriction": merchantsRestriction_1.MerchantsRestriction,
    "NOLocalAccountIdentification": nOLocalAccountIdentification_1.NOLocalAccountIdentification,
    "Name": name_1.Name,
    "NumberAndBicAccountIdentification": numberAndBicAccountIdentification_1.NumberAndBicAccountIdentification,
    "PLLocalAccountIdentification": pLLocalAccountIdentification_1.PLLocalAccountIdentification,
    "PaginatedAccountHoldersResponse": paginatedAccountHoldersResponse_1.PaginatedAccountHoldersResponse,
    "PaginatedBalanceAccountsResponse": paginatedBalanceAccountsResponse_1.PaginatedBalanceAccountsResponse,
    "PaginatedPaymentInstrumentsResponse": paginatedPaymentInstrumentsResponse_1.PaginatedPaymentInstrumentsResponse,
    "PaymentInstrument": paymentInstrument_1.PaymentInstrument,
    "PaymentInstrumentGroup": paymentInstrumentGroup_1.PaymentInstrumentGroup,
    "PaymentInstrumentGroupInfo": paymentInstrumentGroupInfo_1.PaymentInstrumentGroupInfo,
    "PaymentInstrumentInfo": paymentInstrumentInfo_1.PaymentInstrumentInfo,
    "PaymentInstrumentRevealInfo": paymentInstrumentRevealInfo_1.PaymentInstrumentRevealInfo,
    "PaymentInstrumentUpdateRequest": paymentInstrumentUpdateRequest_1.PaymentInstrumentUpdateRequest,
    "Phone": phone_1.Phone,
    "PhoneNumber": phoneNumber_1.PhoneNumber,
    "ProcessingTypesRestriction": processingTypesRestriction_1.ProcessingTypesRestriction,
    "Repayment": repayment_1.Repayment,
    "RepaymentTerm": repaymentTerm_1.RepaymentTerm,
    "RestServiceError": restServiceError_1.RestServiceError,
    "SELocalAccountIdentification": sELocalAccountIdentification_1.SELocalAccountIdentification,
    "SGLocalAccountIdentification": sGLocalAccountIdentification_1.SGLocalAccountIdentification,
    "StringMatch": stringMatch_1.StringMatch,
    "SweepConfigurationV2": sweepConfigurationV2_1.SweepConfigurationV2,
    "SweepCounterparty": sweepCounterparty_1.SweepCounterparty,
    "SweepSchedule": sweepSchedule_1.SweepSchedule,
    "ThresholdRepayment": thresholdRepayment_1.ThresholdRepayment,
    "TimeOfDay": timeOfDay_1.TimeOfDay,
    "TimeOfDayRestriction": timeOfDayRestriction_1.TimeOfDayRestriction,
    "TotalAmountRestriction": totalAmountRestriction_1.TotalAmountRestriction,
    "TransactionRule": transactionRule_1.TransactionRule,
    "TransactionRuleEntityKey": transactionRuleEntityKey_1.TransactionRuleEntityKey,
    "TransactionRuleInfo": transactionRuleInfo_1.TransactionRuleInfo,
    "TransactionRuleInterval": transactionRuleInterval_1.TransactionRuleInterval,
    "TransactionRuleResponse": transactionRuleResponse_1.TransactionRuleResponse,
    "TransactionRuleRestrictions": transactionRuleRestrictions_1.TransactionRuleRestrictions,
    "TransactionRulesResponse": transactionRulesResponse_1.TransactionRulesResponse,
    "UKLocalAccountIdentification": uKLocalAccountIdentification_1.UKLocalAccountIdentification,
    "USLocalAccountIdentification": uSLocalAccountIdentification_1.USLocalAccountIdentification,
    "UpdatePaymentInstrument": updatePaymentInstrument_1.UpdatePaymentInstrument,
    "VerificationDeadline": verificationDeadline_1.VerificationDeadline,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map