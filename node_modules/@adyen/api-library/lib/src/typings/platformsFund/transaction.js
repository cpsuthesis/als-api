"use strict";
/*
 * The version of the OpenAPI document: v6
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
class Transaction {
    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }
}
exports.Transaction = Transaction;
Transaction.discriminator = undefined;
Transaction.attributeTypeMap = [
    {
        "name": "amount",
        "baseName": "amount",
        "type": "Amount"
    },
    {
        "name": "bankAccountDetail",
        "baseName": "bankAccountDetail",
        "type": "BankAccountDetail"
    },
    {
        "name": "captureMerchantReference",
        "baseName": "captureMerchantReference",
        "type": "string"
    },
    {
        "name": "capturePspReference",
        "baseName": "capturePspReference",
        "type": "string"
    },
    {
        "name": "creationDate",
        "baseName": "creationDate",
        "type": "Date"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "destinationAccountCode",
        "baseName": "destinationAccountCode",
        "type": "string"
    },
    {
        "name": "disputePspReference",
        "baseName": "disputePspReference",
        "type": "string"
    },
    {
        "name": "disputeReasonCode",
        "baseName": "disputeReasonCode",
        "type": "string"
    },
    {
        "name": "merchantReference",
        "baseName": "merchantReference",
        "type": "string"
    },
    {
        "name": "paymentPspReference",
        "baseName": "paymentPspReference",
        "type": "string"
    },
    {
        "name": "payoutPspReference",
        "baseName": "payoutPspReference",
        "type": "string"
    },
    {
        "name": "pspReference",
        "baseName": "pspReference",
        "type": "string"
    },
    {
        "name": "sourceAccountCode",
        "baseName": "sourceAccountCode",
        "type": "string"
    },
    {
        "name": "transactionStatus",
        "baseName": "transactionStatus",
        "type": "Transaction.TransactionStatusEnum"
    },
    {
        "name": "transferCode",
        "baseName": "transferCode",
        "type": "string"
    }
];
(function (Transaction) {
    let TransactionStatusEnum;
    (function (TransactionStatusEnum) {
        TransactionStatusEnum["BalanceNotPaidOutTransfer"] = "BalanceNotPaidOutTransfer";
        TransactionStatusEnum["BalancePlatformSweep"] = "BalancePlatformSweep";
        TransactionStatusEnum["BalancePlatformSweepReturned"] = "BalancePlatformSweepReturned";
        TransactionStatusEnum["Chargeback"] = "Chargeback";
        TransactionStatusEnum["ChargebackCorrection"] = "ChargebackCorrection";
        TransactionStatusEnum["ChargebackCorrectionReceived"] = "ChargebackCorrectionReceived";
        TransactionStatusEnum["ChargebackReceived"] = "ChargebackReceived";
        TransactionStatusEnum["ChargebackReversed"] = "ChargebackReversed";
        TransactionStatusEnum["ChargebackReversedCorrection"] = "ChargebackReversedCorrection";
        TransactionStatusEnum["ChargebackReversedCorrectionReceived"] = "ChargebackReversedCorrectionReceived";
        TransactionStatusEnum["ChargebackReversedReceived"] = "ChargebackReversedReceived";
        TransactionStatusEnum["Converted"] = "Converted";
        TransactionStatusEnum["CreditClosed"] = "CreditClosed";
        TransactionStatusEnum["CreditFailed"] = "CreditFailed";
        TransactionStatusEnum["CreditReversed"] = "CreditReversed";
        TransactionStatusEnum["CreditReversedReceived"] = "CreditReversedReceived";
        TransactionStatusEnum["CreditSuspended"] = "CreditSuspended";
        TransactionStatusEnum["Credited"] = "Credited";
        TransactionStatusEnum["DebitFailed"] = "DebitFailed";
        TransactionStatusEnum["DebitReversedReceived"] = "DebitReversedReceived";
        TransactionStatusEnum["Debited"] = "Debited";
        TransactionStatusEnum["DebitedReversed"] = "DebitedReversed";
        TransactionStatusEnum["DepositCorrectionCredited"] = "DepositCorrectionCredited";
        TransactionStatusEnum["DepositCorrectionDebited"] = "DepositCorrectionDebited";
        TransactionStatusEnum["Fee"] = "Fee";
        TransactionStatusEnum["FundTransfer"] = "FundTransfer";
        TransactionStatusEnum["FundTransferReversed"] = "FundTransferReversed";
        TransactionStatusEnum["InvoiceDeductionCredited"] = "InvoiceDeductionCredited";
        TransactionStatusEnum["InvoiceDeductionDebited"] = "InvoiceDeductionDebited";
        TransactionStatusEnum["ManualCorrected"] = "ManualCorrected";
        TransactionStatusEnum["ManualCorrectionCredited"] = "ManualCorrectionCredited";
        TransactionStatusEnum["ManualCorrectionDebited"] = "ManualCorrectionDebited";
        TransactionStatusEnum["MerchantPayin"] = "MerchantPayin";
        TransactionStatusEnum["MerchantPayinReversed"] = "MerchantPayinReversed";
        TransactionStatusEnum["Payout"] = "Payout";
        TransactionStatusEnum["PayoutReversed"] = "PayoutReversed";
        TransactionStatusEnum["PendingCredit"] = "PendingCredit";
        TransactionStatusEnum["PendingDebit"] = "PendingDebit";
        TransactionStatusEnum["PendingFundTransfer"] = "PendingFundTransfer";
        TransactionStatusEnum["ReCredited"] = "ReCredited";
        TransactionStatusEnum["ReCreditedReceived"] = "ReCreditedReceived";
        TransactionStatusEnum["SecondChargeback"] = "SecondChargeback";
        TransactionStatusEnum["SecondChargebackCorrection"] = "SecondChargebackCorrection";
        TransactionStatusEnum["SecondChargebackCorrectionReceived"] = "SecondChargebackCorrectionReceived";
        TransactionStatusEnum["SecondChargebackReceived"] = "SecondChargebackReceived";
    })(TransactionStatusEnum = Transaction.TransactionStatusEnum || (Transaction.TransactionStatusEnum = {}));
})(Transaction = exports.Transaction || (exports.Transaction = {}));
//# sourceMappingURL=transaction.js.map