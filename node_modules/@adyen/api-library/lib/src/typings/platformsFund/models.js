"use strict";
/*
 * The version of the OpenAPI document: v6
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./accountDetailBalance"), exports);
__exportStar(require("./accountHolderBalanceRequest"), exports);
__exportStar(require("./accountHolderBalanceResponse"), exports);
__exportStar(require("./accountHolderTransactionListRequest"), exports);
__exportStar(require("./accountHolderTransactionListResponse"), exports);
__exportStar(require("./accountTransactionList"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./bankAccountDetail"), exports);
__exportStar(require("./debitAccountHolderRequest"), exports);
__exportStar(require("./debitAccountHolderResponse"), exports);
__exportStar(require("./detailBalance"), exports);
__exportStar(require("./errorFieldType"), exports);
__exportStar(require("./fieldType"), exports);
__exportStar(require("./payoutAccountHolderRequest"), exports);
__exportStar(require("./payoutAccountHolderResponse"), exports);
__exportStar(require("./refundFundsTransferRequest"), exports);
__exportStar(require("./refundFundsTransferResponse"), exports);
__exportStar(require("./refundNotPaidOutTransfersRequest"), exports);
__exportStar(require("./refundNotPaidOutTransfersResponse"), exports);
__exportStar(require("./serviceError"), exports);
__exportStar(require("./setupBeneficiaryRequest"), exports);
__exportStar(require("./setupBeneficiaryResponse"), exports);
__exportStar(require("./split"), exports);
__exportStar(require("./splitAmount"), exports);
__exportStar(require("./transaction"), exports);
__exportStar(require("./transactionListForAccount"), exports);
__exportStar(require("./transferFundsRequest"), exports);
__exportStar(require("./transferFundsResponse"), exports);
const accountDetailBalance_1 = require("./accountDetailBalance");
const accountHolderBalanceRequest_1 = require("./accountHolderBalanceRequest");
const accountHolderBalanceResponse_1 = require("./accountHolderBalanceResponse");
const accountHolderTransactionListRequest_1 = require("./accountHolderTransactionListRequest");
const accountHolderTransactionListResponse_1 = require("./accountHolderTransactionListResponse");
const accountTransactionList_1 = require("./accountTransactionList");
const amount_1 = require("./amount");
const bankAccountDetail_1 = require("./bankAccountDetail");
const debitAccountHolderRequest_1 = require("./debitAccountHolderRequest");
const debitAccountHolderResponse_1 = require("./debitAccountHolderResponse");
const detailBalance_1 = require("./detailBalance");
const errorFieldType_1 = require("./errorFieldType");
const fieldType_1 = require("./fieldType");
const payoutAccountHolderRequest_1 = require("./payoutAccountHolderRequest");
const payoutAccountHolderResponse_1 = require("./payoutAccountHolderResponse");
const refundFundsTransferRequest_1 = require("./refundFundsTransferRequest");
const refundFundsTransferResponse_1 = require("./refundFundsTransferResponse");
const refundNotPaidOutTransfersRequest_1 = require("./refundNotPaidOutTransfersRequest");
const refundNotPaidOutTransfersResponse_1 = require("./refundNotPaidOutTransfersResponse");
const serviceError_1 = require("./serviceError");
const setupBeneficiaryRequest_1 = require("./setupBeneficiaryRequest");
const setupBeneficiaryResponse_1 = require("./setupBeneficiaryResponse");
const split_1 = require("./split");
const splitAmount_1 = require("./splitAmount");
const transaction_1 = require("./transaction");
const transactionListForAccount_1 = require("./transactionListForAccount");
const transferFundsRequest_1 = require("./transferFundsRequest");
const transferFundsResponse_1 = require("./transferFundsResponse");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AccountHolderTransactionListRequest.TransactionStatusesEnum": accountHolderTransactionListRequest_1.AccountHolderTransactionListRequest.TransactionStatusesEnum,
    "FieldType.FieldNameEnum": fieldType_1.FieldType.FieldNameEnum,
    "PayoutAccountHolderRequest.PayoutSpeedEnum": payoutAccountHolderRequest_1.PayoutAccountHolderRequest.PayoutSpeedEnum,
    "PayoutAccountHolderResponse.PayoutSpeedEnum": payoutAccountHolderResponse_1.PayoutAccountHolderResponse.PayoutSpeedEnum,
    "Split.TypeEnum": split_1.Split.TypeEnum,
    "Transaction.TransactionStatusEnum": transaction_1.Transaction.TransactionStatusEnum,
};
let typeMap = {
    "AccountDetailBalance": accountDetailBalance_1.AccountDetailBalance,
    "AccountHolderBalanceRequest": accountHolderBalanceRequest_1.AccountHolderBalanceRequest,
    "AccountHolderBalanceResponse": accountHolderBalanceResponse_1.AccountHolderBalanceResponse,
    "AccountHolderTransactionListRequest": accountHolderTransactionListRequest_1.AccountHolderTransactionListRequest,
    "AccountHolderTransactionListResponse": accountHolderTransactionListResponse_1.AccountHolderTransactionListResponse,
    "AccountTransactionList": accountTransactionList_1.AccountTransactionList,
    "Amount": amount_1.Amount,
    "BankAccountDetail": bankAccountDetail_1.BankAccountDetail,
    "DebitAccountHolderRequest": debitAccountHolderRequest_1.DebitAccountHolderRequest,
    "DebitAccountHolderResponse": debitAccountHolderResponse_1.DebitAccountHolderResponse,
    "DetailBalance": detailBalance_1.DetailBalance,
    "ErrorFieldType": errorFieldType_1.ErrorFieldType,
    "FieldType": fieldType_1.FieldType,
    "PayoutAccountHolderRequest": payoutAccountHolderRequest_1.PayoutAccountHolderRequest,
    "PayoutAccountHolderResponse": payoutAccountHolderResponse_1.PayoutAccountHolderResponse,
    "RefundFundsTransferRequest": refundFundsTransferRequest_1.RefundFundsTransferRequest,
    "RefundFundsTransferResponse": refundFundsTransferResponse_1.RefundFundsTransferResponse,
    "RefundNotPaidOutTransfersRequest": refundNotPaidOutTransfersRequest_1.RefundNotPaidOutTransfersRequest,
    "RefundNotPaidOutTransfersResponse": refundNotPaidOutTransfersResponse_1.RefundNotPaidOutTransfersResponse,
    "ServiceError": serviceError_1.ServiceError,
    "SetupBeneficiaryRequest": setupBeneficiaryRequest_1.SetupBeneficiaryRequest,
    "SetupBeneficiaryResponse": setupBeneficiaryResponse_1.SetupBeneficiaryResponse,
    "Split": split_1.Split,
    "SplitAmount": splitAmount_1.SplitAmount,
    "Transaction": transaction_1.Transaction,
    "TransactionListForAccount": transactionListForAccount_1.TransactionListForAccount,
    "TransferFundsRequest": transferFundsRequest_1.TransferFundsRequest,
    "TransferFundsResponse": transferFundsResponse_1.TransferFundsResponse,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map