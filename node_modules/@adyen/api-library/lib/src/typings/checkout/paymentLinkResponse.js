"use strict";
/*
 * The version of the OpenAPI document: v70
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentLinkResponse = void 0;
class PaymentLinkResponse {
    static getAttributeTypeMap() {
        return PaymentLinkResponse.attributeTypeMap;
    }
}
exports.PaymentLinkResponse = PaymentLinkResponse;
PaymentLinkResponse.discriminator = undefined;
PaymentLinkResponse.attributeTypeMap = [
    {
        "name": "allowedPaymentMethods",
        "baseName": "allowedPaymentMethods",
        "type": "Array<string>"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "Amount"
    },
    {
        "name": "applicationInfo",
        "baseName": "applicationInfo",
        "type": "ApplicationInfo"
    },
    {
        "name": "billingAddress",
        "baseName": "billingAddress",
        "type": "Address"
    },
    {
        "name": "blockedPaymentMethods",
        "baseName": "blockedPaymentMethods",
        "type": "Array<string>"
    },
    {
        "name": "captureDelayHours",
        "baseName": "captureDelayHours",
        "type": "number"
    },
    {
        "name": "countryCode",
        "baseName": "countryCode",
        "type": "string"
    },
    {
        "name": "dateOfBirth",
        "baseName": "dateOfBirth",
        "type": "string"
    },
    {
        "name": "deliverAt",
        "baseName": "deliverAt",
        "type": "Date"
    },
    {
        "name": "deliveryAddress",
        "baseName": "deliveryAddress",
        "type": "Address"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "expiresAt",
        "baseName": "expiresAt",
        "type": "string"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "installmentOptions",
        "baseName": "installmentOptions",
        "type": "{ [key: string]: InstallmentOption; }"
    },
    {
        "name": "lineItems",
        "baseName": "lineItems",
        "type": "Array<LineItem>"
    },
    {
        "name": "manualCapture",
        "baseName": "manualCapture",
        "type": "boolean"
    },
    {
        "name": "mcc",
        "baseName": "mcc",
        "type": "string"
    },
    {
        "name": "merchantAccount",
        "baseName": "merchantAccount",
        "type": "string"
    },
    {
        "name": "merchantOrderReference",
        "baseName": "merchantOrderReference",
        "type": "string"
    },
    {
        "name": "metadata",
        "baseName": "metadata",
        "type": "{ [key: string]: string; }"
    },
    {
        "name": "recurringProcessingModel",
        "baseName": "recurringProcessingModel",
        "type": "PaymentLinkResponse.RecurringProcessingModelEnum"
    },
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string"
    },
    {
        "name": "requiredShopperFields",
        "baseName": "requiredShopperFields",
        "type": "Array<PaymentLinkResponse.RequiredShopperFieldsEnum>"
    },
    {
        "name": "returnUrl",
        "baseName": "returnUrl",
        "type": "string"
    },
    {
        "name": "reusable",
        "baseName": "reusable",
        "type": "boolean"
    },
    {
        "name": "riskData",
        "baseName": "riskData",
        "type": "RiskData"
    },
    {
        "name": "shopperEmail",
        "baseName": "shopperEmail",
        "type": "string"
    },
    {
        "name": "shopperLocale",
        "baseName": "shopperLocale",
        "type": "string"
    },
    {
        "name": "shopperName",
        "baseName": "shopperName",
        "type": "Name"
    },
    {
        "name": "shopperReference",
        "baseName": "shopperReference",
        "type": "string"
    },
    {
        "name": "shopperStatement",
        "baseName": "shopperStatement",
        "type": "string"
    },
    {
        "name": "showRemovePaymentMethodButton",
        "baseName": "showRemovePaymentMethodButton",
        "type": "boolean"
    },
    {
        "name": "socialSecurityNumber",
        "baseName": "socialSecurityNumber",
        "type": "string"
    },
    {
        "name": "splitCardFundingSources",
        "baseName": "splitCardFundingSources",
        "type": "boolean"
    },
    {
        "name": "splits",
        "baseName": "splits",
        "type": "Array<Split>"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "PaymentLinkResponse.StatusEnum"
    },
    {
        "name": "store",
        "baseName": "store",
        "type": "string"
    },
    {
        "name": "storePaymentMethodMode",
        "baseName": "storePaymentMethodMode",
        "type": "PaymentLinkResponse.StorePaymentMethodModeEnum"
    },
    {
        "name": "telephoneNumber",
        "baseName": "telephoneNumber",
        "type": "string"
    },
    {
        "name": "themeId",
        "baseName": "themeId",
        "type": "string"
    },
    {
        "name": "updatedAt",
        "baseName": "updatedAt",
        "type": "Date"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    }
];
(function (PaymentLinkResponse) {
    let RecurringProcessingModelEnum;
    (function (RecurringProcessingModelEnum) {
        RecurringProcessingModelEnum["CardOnFile"] = "CardOnFile";
        RecurringProcessingModelEnum["Subscription"] = "Subscription";
        RecurringProcessingModelEnum["UnscheduledCardOnFile"] = "UnscheduledCardOnFile";
    })(RecurringProcessingModelEnum = PaymentLinkResponse.RecurringProcessingModelEnum || (PaymentLinkResponse.RecurringProcessingModelEnum = {}));
    let RequiredShopperFieldsEnum;
    (function (RequiredShopperFieldsEnum) {
        RequiredShopperFieldsEnum["BillingAddress"] = "billingAddress";
        RequiredShopperFieldsEnum["DeliveryAddress"] = "deliveryAddress";
        RequiredShopperFieldsEnum["ShopperEmail"] = "shopperEmail";
        RequiredShopperFieldsEnum["ShopperName"] = "shopperName";
        RequiredShopperFieldsEnum["TelephoneNumber"] = "telephoneNumber";
    })(RequiredShopperFieldsEnum = PaymentLinkResponse.RequiredShopperFieldsEnum || (PaymentLinkResponse.RequiredShopperFieldsEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum["Active"] = "active";
        StatusEnum["Completed"] = "completed";
        StatusEnum["Expired"] = "expired";
        StatusEnum["Paid"] = "paid";
        StatusEnum["PaymentPending"] = "paymentPending";
    })(StatusEnum = PaymentLinkResponse.StatusEnum || (PaymentLinkResponse.StatusEnum = {}));
    let StorePaymentMethodModeEnum;
    (function (StorePaymentMethodModeEnum) {
        StorePaymentMethodModeEnum["AskForConsent"] = "askForConsent";
        StorePaymentMethodModeEnum["Disabled"] = "disabled";
        StorePaymentMethodModeEnum["Enabled"] = "enabled";
    })(StorePaymentMethodModeEnum = PaymentLinkResponse.StorePaymentMethodModeEnum || (PaymentLinkResponse.StorePaymentMethodModeEnum = {}));
})(PaymentLinkResponse = exports.PaymentLinkResponse || (exports.PaymentLinkResponse = {}));
//# sourceMappingURL=paymentLinkResponse.js.map