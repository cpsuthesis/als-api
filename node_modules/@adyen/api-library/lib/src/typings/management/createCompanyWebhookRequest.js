"use strict";
/*
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateCompanyWebhookRequest = void 0;
class CreateCompanyWebhookRequest {
    static getAttributeTypeMap() {
        return CreateCompanyWebhookRequest.attributeTypeMap;
    }
}
exports.CreateCompanyWebhookRequest = CreateCompanyWebhookRequest;
CreateCompanyWebhookRequest.discriminator = undefined;
CreateCompanyWebhookRequest.attributeTypeMap = [
    {
        "name": "acceptsExpiredCertificate",
        "baseName": "acceptsExpiredCertificate",
        "type": "boolean"
    },
    {
        "name": "acceptsSelfSignedCertificate",
        "baseName": "acceptsSelfSignedCertificate",
        "type": "boolean"
    },
    {
        "name": "acceptsUntrustedRootCertificate",
        "baseName": "acceptsUntrustedRootCertificate",
        "type": "boolean"
    },
    {
        "name": "active",
        "baseName": "active",
        "type": "boolean"
    },
    {
        "name": "additionalSettings",
        "baseName": "additionalSettings",
        "type": "AdditionalSettings"
    },
    {
        "name": "communicationFormat",
        "baseName": "communicationFormat",
        "type": "CreateCompanyWebhookRequest.CommunicationFormatEnum"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "filterMerchantAccountType",
        "baseName": "filterMerchantAccountType",
        "type": "CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum"
    },
    {
        "name": "filterMerchantAccounts",
        "baseName": "filterMerchantAccounts",
        "type": "Array<string>"
    },
    {
        "name": "networkType",
        "baseName": "networkType",
        "type": "CreateCompanyWebhookRequest.NetworkTypeEnum"
    },
    {
        "name": "password",
        "baseName": "password",
        "type": "string"
    },
    {
        "name": "populateSoapActionHeader",
        "baseName": "populateSoapActionHeader",
        "type": "boolean"
    },
    {
        "name": "sslVersion",
        "baseName": "sslVersion",
        "type": "CreateCompanyWebhookRequest.SslVersionEnum"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "string"
    },
    {
        "name": "url",
        "baseName": "url",
        "type": "string"
    },
    {
        "name": "username",
        "baseName": "username",
        "type": "string"
    }
];
(function (CreateCompanyWebhookRequest) {
    let CommunicationFormatEnum;
    (function (CommunicationFormatEnum) {
        CommunicationFormatEnum["Http"] = "http";
        CommunicationFormatEnum["Json"] = "json";
        CommunicationFormatEnum["Soap"] = "soap";
    })(CommunicationFormatEnum = CreateCompanyWebhookRequest.CommunicationFormatEnum || (CreateCompanyWebhookRequest.CommunicationFormatEnum = {}));
    let FilterMerchantAccountTypeEnum;
    (function (FilterMerchantAccountTypeEnum) {
        FilterMerchantAccountTypeEnum["AllAccounts"] = "allAccounts";
        FilterMerchantAccountTypeEnum["ExcludeAccounts"] = "excludeAccounts";
        FilterMerchantAccountTypeEnum["IncludeAccounts"] = "includeAccounts";
    })(FilterMerchantAccountTypeEnum = CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum || (CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum = {}));
    let NetworkTypeEnum;
    (function (NetworkTypeEnum) {
        NetworkTypeEnum["Local"] = "local";
        NetworkTypeEnum["Public"] = "public";
    })(NetworkTypeEnum = CreateCompanyWebhookRequest.NetworkTypeEnum || (CreateCompanyWebhookRequest.NetworkTypeEnum = {}));
    let SslVersionEnum;
    (function (SslVersionEnum) {
        SslVersionEnum["Http"] = "HTTP";
        SslVersionEnum["Tlsv12"] = "TLSv1.2";
        SslVersionEnum["Tlsv13"] = "TLSv1.3";
    })(SslVersionEnum = CreateCompanyWebhookRequest.SslVersionEnum || (CreateCompanyWebhookRequest.SslVersionEnum = {}));
})(CreateCompanyWebhookRequest = exports.CreateCompanyWebhookRequest || (exports.CreateCompanyWebhookRequest = {}));
//# sourceMappingURL=createCompanyWebhookRequest.js.map