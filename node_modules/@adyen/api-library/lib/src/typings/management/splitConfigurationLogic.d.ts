import { AdditionalCommission } from './additionalCommission';
import { Commission } from './commission';
export declare class SplitConfigurationLogic {
    'additionalCommission'?: AdditionalCommission;
    /**
    * Specifies the logic to apply when booking the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
    */
    'chargeback'?: SplitConfigurationLogic.ChargebackEnum;
    'commission': Commission;
    /**
    * Specifies the logic to apply when booking the transaction fees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'paymentFee': SplitConfigurationLogic.PaymentFeeEnum;
    /**
    * Specifies the logic to apply when booking the amount left over after currency conversion.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
    */
    'remainder'?: SplitConfigurationLogic.RemainderEnum;
    /**
    * Unique identifier of the split logic that is applied when the split configuration conditions are met.
    */
    'splitLogicId'?: string;
    /**
    * Specifies the logic to apply when booking the surcharge amount.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**
    */
    'surcharge'?: SplitConfigurationLogic.SurchargeEnum;
    /**
    * Specifies the logic to apply when booking tips (gratuity).  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
    */
    'tip'?: SplitConfigurationLogic.TipEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace SplitConfigurationLogic {
    enum ChargebackEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount",
        DeductAccordingToSplitRatio = "deductAccordingToSplitRatio"
    }
    enum PaymentFeeEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum RemainderEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
    enum SurchargeEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
    enum TipEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
}
