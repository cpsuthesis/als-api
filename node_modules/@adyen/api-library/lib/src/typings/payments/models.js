"use strict";
/*
 * The version of the OpenAPI document: v68
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
__exportStar(require("./accountInfo"), exports);
__exportStar(require("./acctInfo"), exports);
__exportStar(require("./additionalData3DSecure"), exports);
__exportStar(require("./additionalDataAirline"), exports);
__exportStar(require("./additionalDataCarRental"), exports);
__exportStar(require("./additionalDataCommon"), exports);
__exportStar(require("./additionalDataLevel23"), exports);
__exportStar(require("./additionalDataLodging"), exports);
__exportStar(require("./additionalDataModifications"), exports);
__exportStar(require("./additionalDataOpenInvoice"), exports);
__exportStar(require("./additionalDataOpi"), exports);
__exportStar(require("./additionalDataRatepay"), exports);
__exportStar(require("./additionalDataRetry"), exports);
__exportStar(require("./additionalDataRisk"), exports);
__exportStar(require("./additionalDataRiskStandalone"), exports);
__exportStar(require("./additionalDataSubMerchant"), exports);
__exportStar(require("./additionalDataTemporaryServices"), exports);
__exportStar(require("./additionalDataWallets"), exports);
__exportStar(require("./address"), exports);
__exportStar(require("./adjustAuthorisationRequest"), exports);
__exportStar(require("./amount"), exports);
__exportStar(require("./applicationInfo"), exports);
__exportStar(require("./authenticationResultRequest"), exports);
__exportStar(require("./authenticationResultResponse"), exports);
__exportStar(require("./bankAccount"), exports);
__exportStar(require("./browserInfo"), exports);
__exportStar(require("./cancelOrRefundRequest"), exports);
__exportStar(require("./cancelRequest"), exports);
__exportStar(require("./captureRequest"), exports);
__exportStar(require("./card"), exports);
__exportStar(require("./commonField"), exports);
__exportStar(require("./deviceRenderOptions"), exports);
__exportStar(require("./donationRequest"), exports);
__exportStar(require("./externalPlatform"), exports);
__exportStar(require("./forexQuote"), exports);
__exportStar(require("./fraudCheckResult"), exports);
__exportStar(require("./fraudCheckResultWrapper"), exports);
__exportStar(require("./fraudResult"), exports);
__exportStar(require("./fundDestination"), exports);
__exportStar(require("./fundSource"), exports);
__exportStar(require("./installments"), exports);
__exportStar(require("./mandate"), exports);
__exportStar(require("./merchantDevice"), exports);
__exportStar(require("./merchantRiskIndicator"), exports);
__exportStar(require("./modificationResult"), exports);
__exportStar(require("./name"), exports);
__exportStar(require("./paymentRequest"), exports);
__exportStar(require("./paymentRequest3d"), exports);
__exportStar(require("./paymentRequest3ds2"), exports);
__exportStar(require("./paymentResult"), exports);
__exportStar(require("./phone"), exports);
__exportStar(require("./platformChargebackLogic"), exports);
__exportStar(require("./recurring"), exports);
__exportStar(require("./refundRequest"), exports);
__exportStar(require("./responseAdditionalData3DSecure"), exports);
__exportStar(require("./responseAdditionalDataBillingAddress"), exports);
__exportStar(require("./responseAdditionalDataCard"), exports);
__exportStar(require("./responseAdditionalDataCommon"), exports);
__exportStar(require("./responseAdditionalDataInstallments"), exports);
__exportStar(require("./responseAdditionalDataNetworkTokens"), exports);
__exportStar(require("./responseAdditionalDataOpi"), exports);
__exportStar(require("./responseAdditionalDataSepa"), exports);
__exportStar(require("./sDKEphemPubKey"), exports);
__exportStar(require("./serviceError"), exports);
__exportStar(require("./shopperInteractionDevice"), exports);
__exportStar(require("./split"), exports);
__exportStar(require("./splitAmount"), exports);
__exportStar(require("./subMerchant"), exports);
__exportStar(require("./technicalCancelRequest"), exports);
__exportStar(require("./threeDS1Result"), exports);
__exportStar(require("./threeDS2RequestData"), exports);
__exportStar(require("./threeDS2Result"), exports);
__exportStar(require("./threeDS2ResultRequest"), exports);
__exportStar(require("./threeDS2ResultResponse"), exports);
__exportStar(require("./threeDSRequestorAuthenticationInfo"), exports);
__exportStar(require("./threeDSRequestorPriorAuthenticationInfo"), exports);
__exportStar(require("./threeDSecureData"), exports);
__exportStar(require("./voidPendingRefundRequest"), exports);
const accountInfo_1 = require("./accountInfo");
const acctInfo_1 = require("./acctInfo");
const additionalData3DSecure_1 = require("./additionalData3DSecure");
const additionalDataAirline_1 = require("./additionalDataAirline");
const additionalDataCarRental_1 = require("./additionalDataCarRental");
const additionalDataCommon_1 = require("./additionalDataCommon");
const additionalDataLevel23_1 = require("./additionalDataLevel23");
const additionalDataLodging_1 = require("./additionalDataLodging");
const additionalDataModifications_1 = require("./additionalDataModifications");
const additionalDataOpenInvoice_1 = require("./additionalDataOpenInvoice");
const additionalDataOpi_1 = require("./additionalDataOpi");
const additionalDataRatepay_1 = require("./additionalDataRatepay");
const additionalDataRetry_1 = require("./additionalDataRetry");
const additionalDataRisk_1 = require("./additionalDataRisk");
const additionalDataRiskStandalone_1 = require("./additionalDataRiskStandalone");
const additionalDataSubMerchant_1 = require("./additionalDataSubMerchant");
const additionalDataTemporaryServices_1 = require("./additionalDataTemporaryServices");
const additionalDataWallets_1 = require("./additionalDataWallets");
const address_1 = require("./address");
const adjustAuthorisationRequest_1 = require("./adjustAuthorisationRequest");
const amount_1 = require("./amount");
const applicationInfo_1 = require("./applicationInfo");
const authenticationResultRequest_1 = require("./authenticationResultRequest");
const authenticationResultResponse_1 = require("./authenticationResultResponse");
const bankAccount_1 = require("./bankAccount");
const browserInfo_1 = require("./browserInfo");
const cancelOrRefundRequest_1 = require("./cancelOrRefundRequest");
const cancelRequest_1 = require("./cancelRequest");
const captureRequest_1 = require("./captureRequest");
const card_1 = require("./card");
const commonField_1 = require("./commonField");
const deviceRenderOptions_1 = require("./deviceRenderOptions");
const donationRequest_1 = require("./donationRequest");
const externalPlatform_1 = require("./externalPlatform");
const forexQuote_1 = require("./forexQuote");
const fraudCheckResult_1 = require("./fraudCheckResult");
const fraudCheckResultWrapper_1 = require("./fraudCheckResultWrapper");
const fraudResult_1 = require("./fraudResult");
const fundDestination_1 = require("./fundDestination");
const fundSource_1 = require("./fundSource");
const installments_1 = require("./installments");
const mandate_1 = require("./mandate");
const merchantDevice_1 = require("./merchantDevice");
const merchantRiskIndicator_1 = require("./merchantRiskIndicator");
const modificationResult_1 = require("./modificationResult");
const name_1 = require("./name");
const paymentRequest_1 = require("./paymentRequest");
const paymentRequest3d_1 = require("./paymentRequest3d");
const paymentRequest3ds2_1 = require("./paymentRequest3ds2");
const paymentResult_1 = require("./paymentResult");
const phone_1 = require("./phone");
const platformChargebackLogic_1 = require("./platformChargebackLogic");
const recurring_1 = require("./recurring");
const refundRequest_1 = require("./refundRequest");
const responseAdditionalData3DSecure_1 = require("./responseAdditionalData3DSecure");
const responseAdditionalDataBillingAddress_1 = require("./responseAdditionalDataBillingAddress");
const responseAdditionalDataCard_1 = require("./responseAdditionalDataCard");
const responseAdditionalDataCommon_1 = require("./responseAdditionalDataCommon");
const responseAdditionalDataInstallments_1 = require("./responseAdditionalDataInstallments");
const responseAdditionalDataNetworkTokens_1 = require("./responseAdditionalDataNetworkTokens");
const responseAdditionalDataOpi_1 = require("./responseAdditionalDataOpi");
const responseAdditionalDataSepa_1 = require("./responseAdditionalDataSepa");
const sDKEphemPubKey_1 = require("./sDKEphemPubKey");
const serviceError_1 = require("./serviceError");
const shopperInteractionDevice_1 = require("./shopperInteractionDevice");
const split_1 = require("./split");
const splitAmount_1 = require("./splitAmount");
const subMerchant_1 = require("./subMerchant");
const technicalCancelRequest_1 = require("./technicalCancelRequest");
const threeDS1Result_1 = require("./threeDS1Result");
const threeDS2RequestData_1 = require("./threeDS2RequestData");
const threeDS2Result_1 = require("./threeDS2Result");
const threeDS2ResultRequest_1 = require("./threeDS2ResultRequest");
const threeDS2ResultResponse_1 = require("./threeDS2ResultResponse");
const threeDSRequestorAuthenticationInfo_1 = require("./threeDSRequestorAuthenticationInfo");
const threeDSRequestorPriorAuthenticationInfo_1 = require("./threeDSRequestorPriorAuthenticationInfo");
const threeDSecureData_1 = require("./threeDSecureData");
const voidPendingRefundRequest_1 = require("./voidPendingRefundRequest");
/* tslint:disable:no-unused-variable */
let primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
let enumsMap = {
    "AccountInfo.AccountAgeIndicatorEnum": accountInfo_1.AccountInfo.AccountAgeIndicatorEnum,
    "AccountInfo.AccountChangeIndicatorEnum": accountInfo_1.AccountInfo.AccountChangeIndicatorEnum,
    "AccountInfo.AccountTypeEnum": accountInfo_1.AccountInfo.AccountTypeEnum,
    "AccountInfo.DeliveryAddressUsageIndicatorEnum": accountInfo_1.AccountInfo.DeliveryAddressUsageIndicatorEnum,
    "AccountInfo.PasswordChangeIndicatorEnum": accountInfo_1.AccountInfo.PasswordChangeIndicatorEnum,
    "AccountInfo.PaymentAccountIndicatorEnum": accountInfo_1.AccountInfo.PaymentAccountIndicatorEnum,
    "AcctInfo.ChAccAgeIndEnum": acctInfo_1.AcctInfo.ChAccAgeIndEnum,
    "AcctInfo.ChAccChangeIndEnum": acctInfo_1.AcctInfo.ChAccChangeIndEnum,
    "AcctInfo.ChAccPwChangeIndEnum": acctInfo_1.AcctInfo.ChAccPwChangeIndEnum,
    "AcctInfo.PaymentAccIndEnum": acctInfo_1.AcctInfo.PaymentAccIndEnum,
    "AcctInfo.ShipAddressUsageIndEnum": acctInfo_1.AcctInfo.ShipAddressUsageIndEnum,
    "AcctInfo.ShipNameIndicatorEnum": acctInfo_1.AcctInfo.ShipNameIndicatorEnum,
    "AcctInfo.SuspiciousAccActivityEnum": acctInfo_1.AcctInfo.SuspiciousAccActivityEnum,
    "AdditionalData3DSecure.ChallengeWindowSizeEnum": additionalData3DSecure_1.AdditionalData3DSecure.ChallengeWindowSizeEnum,
    "AdditionalDataCommon.IndustryUsageEnum": additionalDataCommon_1.AdditionalDataCommon.IndustryUsageEnum,
    "DeviceRenderOptions.SdkInterfaceEnum": deviceRenderOptions_1.DeviceRenderOptions.SdkInterfaceEnum,
    "DeviceRenderOptions.SdkUiTypeEnum": deviceRenderOptions_1.DeviceRenderOptions.SdkUiTypeEnum,
    "Installments.PlanEnum": installments_1.Installments.PlanEnum,
    "Mandate.AmountRuleEnum": mandate_1.Mandate.AmountRuleEnum,
    "Mandate.BillingAttemptsRuleEnum": mandate_1.Mandate.BillingAttemptsRuleEnum,
    "Mandate.FrequencyEnum": mandate_1.Mandate.FrequencyEnum,
    "MerchantRiskIndicator.DeliveryAddressIndicatorEnum": merchantRiskIndicator_1.MerchantRiskIndicator.DeliveryAddressIndicatorEnum,
    "MerchantRiskIndicator.DeliveryTimeframeEnum": merchantRiskIndicator_1.MerchantRiskIndicator.DeliveryTimeframeEnum,
    "ModificationResult.ResponseEnum": modificationResult_1.ModificationResult.ResponseEnum,
    "PaymentRequest.EntityTypeEnum": paymentRequest_1.PaymentRequest.EntityTypeEnum,
    "PaymentRequest.FundingSourceEnum": paymentRequest_1.PaymentRequest.FundingSourceEnum,
    "PaymentRequest.RecurringProcessingModelEnum": paymentRequest_1.PaymentRequest.RecurringProcessingModelEnum,
    "PaymentRequest.ShopperInteractionEnum": paymentRequest_1.PaymentRequest.ShopperInteractionEnum,
    "PaymentRequest3d.RecurringProcessingModelEnum": paymentRequest3d_1.PaymentRequest3d.RecurringProcessingModelEnum,
    "PaymentRequest3d.ShopperInteractionEnum": paymentRequest3d_1.PaymentRequest3d.ShopperInteractionEnum,
    "PaymentRequest3ds2.RecurringProcessingModelEnum": paymentRequest3ds2_1.PaymentRequest3ds2.RecurringProcessingModelEnum,
    "PaymentRequest3ds2.ShopperInteractionEnum": paymentRequest3ds2_1.PaymentRequest3ds2.ShopperInteractionEnum,
    "PaymentResult.ResultCodeEnum": paymentResult_1.PaymentResult.ResultCodeEnum,
    "PlatformChargebackLogic.BehaviorEnum": platformChargebackLogic_1.PlatformChargebackLogic.BehaviorEnum,
    "Recurring.ContractEnum": recurring_1.Recurring.ContractEnum,
    "Recurring.TokenServiceEnum": recurring_1.Recurring.TokenServiceEnum,
    "ResponseAdditionalDataCommon.FraudResultTypeEnum": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon.FraudResultTypeEnum,
    "ResponseAdditionalDataCommon.RecurringProcessingModelEnum": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon.RecurringProcessingModelEnum,
    "Split.TypeEnum": split_1.Split.TypeEnum,
    "ThreeDS2RequestData.AcctTypeEnum": threeDS2RequestData_1.ThreeDS2RequestData.AcctTypeEnum,
    "ThreeDS2RequestData.AddrMatchEnum": threeDS2RequestData_1.ThreeDS2RequestData.AddrMatchEnum,
    "ThreeDS2RequestData.ChallengeIndicatorEnum": threeDS2RequestData_1.ThreeDS2RequestData.ChallengeIndicatorEnum,
    "ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum": threeDS2RequestData_1.ThreeDS2RequestData.ThreeDSRequestorChallengeIndEnum,
    "ThreeDS2RequestData.TransTypeEnum": threeDS2RequestData_1.ThreeDS2RequestData.TransTypeEnum,
    "ThreeDS2RequestData.TransactionTypeEnum": threeDS2RequestData_1.ThreeDS2RequestData.TransactionTypeEnum,
    "ThreeDS2Result.ChallengeCancelEnum": threeDS2Result_1.ThreeDS2Result.ChallengeCancelEnum,
    "ThreeDS2Result.ChallengeIndicatorEnum": threeDS2Result_1.ThreeDS2Result.ChallengeIndicatorEnum,
    "ThreeDS2Result.ExemptionIndicatorEnum": threeDS2Result_1.ThreeDS2Result.ExemptionIndicatorEnum,
    "ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnum": threeDSRequestorAuthenticationInfo_1.ThreeDSRequestorAuthenticationInfo.ThreeDSReqAuthMethodEnum,
    "ThreeDSRequestorPriorAuthenticationInfo.ThreeDSReqPriorAuthMethodEnum": threeDSRequestorPriorAuthenticationInfo_1.ThreeDSRequestorPriorAuthenticationInfo.ThreeDSReqPriorAuthMethodEnum,
    "ThreeDSecureData.AuthenticationResponseEnum": threeDSecureData_1.ThreeDSecureData.AuthenticationResponseEnum,
    "ThreeDSecureData.ChallengeCancelEnum": threeDSecureData_1.ThreeDSecureData.ChallengeCancelEnum,
    "ThreeDSecureData.DirectoryResponseEnum": threeDSecureData_1.ThreeDSecureData.DirectoryResponseEnum,
};
let typeMap = {
    "AccountInfo": accountInfo_1.AccountInfo,
    "AcctInfo": acctInfo_1.AcctInfo,
    "AdditionalData3DSecure": additionalData3DSecure_1.AdditionalData3DSecure,
    "AdditionalDataAirline": additionalDataAirline_1.AdditionalDataAirline,
    "AdditionalDataCarRental": additionalDataCarRental_1.AdditionalDataCarRental,
    "AdditionalDataCommon": additionalDataCommon_1.AdditionalDataCommon,
    "AdditionalDataLevel23": additionalDataLevel23_1.AdditionalDataLevel23,
    "AdditionalDataLodging": additionalDataLodging_1.AdditionalDataLodging,
    "AdditionalDataModifications": additionalDataModifications_1.AdditionalDataModifications,
    "AdditionalDataOpenInvoice": additionalDataOpenInvoice_1.AdditionalDataOpenInvoice,
    "AdditionalDataOpi": additionalDataOpi_1.AdditionalDataOpi,
    "AdditionalDataRatepay": additionalDataRatepay_1.AdditionalDataRatepay,
    "AdditionalDataRetry": additionalDataRetry_1.AdditionalDataRetry,
    "AdditionalDataRisk": additionalDataRisk_1.AdditionalDataRisk,
    "AdditionalDataRiskStandalone": additionalDataRiskStandalone_1.AdditionalDataRiskStandalone,
    "AdditionalDataSubMerchant": additionalDataSubMerchant_1.AdditionalDataSubMerchant,
    "AdditionalDataTemporaryServices": additionalDataTemporaryServices_1.AdditionalDataTemporaryServices,
    "AdditionalDataWallets": additionalDataWallets_1.AdditionalDataWallets,
    "Address": address_1.Address,
    "AdjustAuthorisationRequest": adjustAuthorisationRequest_1.AdjustAuthorisationRequest,
    "Amount": amount_1.Amount,
    "ApplicationInfo": applicationInfo_1.ApplicationInfo,
    "AuthenticationResultRequest": authenticationResultRequest_1.AuthenticationResultRequest,
    "AuthenticationResultResponse": authenticationResultResponse_1.AuthenticationResultResponse,
    "BankAccount": bankAccount_1.BankAccount,
    "BrowserInfo": browserInfo_1.BrowserInfo,
    "CancelOrRefundRequest": cancelOrRefundRequest_1.CancelOrRefundRequest,
    "CancelRequest": cancelRequest_1.CancelRequest,
    "CaptureRequest": captureRequest_1.CaptureRequest,
    "Card": card_1.Card,
    "CommonField": commonField_1.CommonField,
    "DeviceRenderOptions": deviceRenderOptions_1.DeviceRenderOptions,
    "DonationRequest": donationRequest_1.DonationRequest,
    "ExternalPlatform": externalPlatform_1.ExternalPlatform,
    "ForexQuote": forexQuote_1.ForexQuote,
    "FraudCheckResult": fraudCheckResult_1.FraudCheckResult,
    "FraudCheckResultWrapper": fraudCheckResultWrapper_1.FraudCheckResultWrapper,
    "FraudResult": fraudResult_1.FraudResult,
    "FundDestination": fundDestination_1.FundDestination,
    "FundSource": fundSource_1.FundSource,
    "Installments": installments_1.Installments,
    "Mandate": mandate_1.Mandate,
    "MerchantDevice": merchantDevice_1.MerchantDevice,
    "MerchantRiskIndicator": merchantRiskIndicator_1.MerchantRiskIndicator,
    "ModificationResult": modificationResult_1.ModificationResult,
    "Name": name_1.Name,
    "PaymentRequest": paymentRequest_1.PaymentRequest,
    "PaymentRequest3d": paymentRequest3d_1.PaymentRequest3d,
    "PaymentRequest3ds2": paymentRequest3ds2_1.PaymentRequest3ds2,
    "PaymentResult": paymentResult_1.PaymentResult,
    "Phone": phone_1.Phone,
    "PlatformChargebackLogic": platformChargebackLogic_1.PlatformChargebackLogic,
    "Recurring": recurring_1.Recurring,
    "RefundRequest": refundRequest_1.RefundRequest,
    "ResponseAdditionalData3DSecure": responseAdditionalData3DSecure_1.ResponseAdditionalData3DSecure,
    "ResponseAdditionalDataBillingAddress": responseAdditionalDataBillingAddress_1.ResponseAdditionalDataBillingAddress,
    "ResponseAdditionalDataCard": responseAdditionalDataCard_1.ResponseAdditionalDataCard,
    "ResponseAdditionalDataCommon": responseAdditionalDataCommon_1.ResponseAdditionalDataCommon,
    "ResponseAdditionalDataInstallments": responseAdditionalDataInstallments_1.ResponseAdditionalDataInstallments,
    "ResponseAdditionalDataNetworkTokens": responseAdditionalDataNetworkTokens_1.ResponseAdditionalDataNetworkTokens,
    "ResponseAdditionalDataOpi": responseAdditionalDataOpi_1.ResponseAdditionalDataOpi,
    "ResponseAdditionalDataSepa": responseAdditionalDataSepa_1.ResponseAdditionalDataSepa,
    "SDKEphemPubKey": sDKEphemPubKey_1.SDKEphemPubKey,
    "ServiceError": serviceError_1.ServiceError,
    "ShopperInteractionDevice": shopperInteractionDevice_1.ShopperInteractionDevice,
    "Split": split_1.Split,
    "SplitAmount": splitAmount_1.SplitAmount,
    "SubMerchant": subMerchant_1.SubMerchant,
    "TechnicalCancelRequest": technicalCancelRequest_1.TechnicalCancelRequest,
    "ThreeDS1Result": threeDS1Result_1.ThreeDS1Result,
    "ThreeDS2RequestData": threeDS2RequestData_1.ThreeDS2RequestData,
    "ThreeDS2Result": threeDS2Result_1.ThreeDS2Result,
    "ThreeDS2ResultRequest": threeDS2ResultRequest_1.ThreeDS2ResultRequest,
    "ThreeDS2ResultResponse": threeDS2ResultResponse_1.ThreeDS2ResultResponse,
    "ThreeDSRequestorAuthenticationInfo": threeDSRequestorAuthenticationInfo_1.ThreeDSRequestorAuthenticationInfo,
    "ThreeDSRequestorPriorAuthenticationInfo": threeDSRequestorPriorAuthenticationInfo_1.ThreeDSRequestorPriorAuthenticationInfo,
    "ThreeDSecureData": threeDSecureData_1.ThreeDSecureData,
    "VoidPendingRefundRequest": voidPendingRefundRequest_1.VoidPendingRefundRequest,
};
class ObjectSerializer {
    static findCorrectType(data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if (typeMap[discriminatorType]) {
                        return discriminatorType; // use the type given in the discriminator
                    }
                    else {
                        return expectedType; // discriminator did not map to a type
                    }
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }
    static serialize(data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toISOString();
        }
        else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // Get the actual type of this object
            type = this.findCorrectType(data, type);
            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }
    static deserialize(data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=models.js.map