"use strict";
/*
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalanceAccountsApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/balancePlatform/models");
class BalanceAccountsApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://balanceplatform-api-test.adyen.com/bcl/v2";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Delete a sweep
    * @param balanceAccountId {@link string } The unique identifier of the balance account.
    * @param sweepId {@link string } The unique identifier of the sweep.
    * @param requestOptions {@link IRequest.Options}
    */
    async deleteSweep(balanceAccountId, sweepId, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}`
            .replace("{" + "balanceAccountId" + "}", encodeURIComponent(String(balanceAccountId)))
            .replace("{" + "sweepId" + "}", encodeURIComponent(String(sweepId)));
        const resource = new resource_1.default(this, endpoint);
        await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
    }
    /**
    * @summary Get all sweeps for a balance account
    * @param balanceAccountId {@link string } The unique identifier of the balance account.
    * @param offset {@link number } The number of items that you want to skip.
    * @param limit {@link number } The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link BalanceSweepConfigurationsResponse }
    */
    async getAllSweepsForBalanceAccount(balanceAccountId, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{balanceAccountId}/sweeps`
            .replace("{" + "balanceAccountId" + "}", encodeURIComponent(String(balanceAccountId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "BalanceSweepConfigurationsResponse");
    }
    /**
    * @summary Get a sweep
    * @param balanceAccountId {@link string } The unique identifier of the balance account.
    * @param sweepId {@link string } The unique identifier of the sweep.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SweepConfigurationV2 }
    */
    async getSweep(balanceAccountId, sweepId, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}`
            .replace("{" + "balanceAccountId" + "}", encodeURIComponent(String(balanceAccountId)))
            .replace("{" + "sweepId" + "}", encodeURIComponent(String(sweepId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "SweepConfigurationV2");
    }
    /**
    * @summary Get a balance account
    * @param id {@link string } The unique identifier of the balance account.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link BalanceAccount }
    */
    async getBalanceAccount(id, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "BalanceAccount");
    }
    /**
    * @summary Get all payment instruments for a balance account
    * @param id {@link string } The unique identifier of the balance account.
    * @param offset {@link number } The number of items that you want to skip.
    * @param limit {@link number } The number of items returned per page, maximum 100 items. By default, the response returns 10 items per page.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaginatedPaymentInstrumentsResponse }
    */
    async getAllPaymentInstrumentsForBalanceAccount(id, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/paymentInstruments`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "PaginatedPaymentInstrumentsResponse");
    }
    /**
    * @summary Update a sweep
    * @param balanceAccountId {@link string } The unique identifier of the balance account.
    * @param sweepId {@link string } The unique identifier of the sweep.
    * @param sweepConfigurationV2 {@link SweepConfigurationV2 }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SweepConfigurationV2 }
    */
    async updateSweep(balanceAccountId, sweepId, sweepConfigurationV2, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{balanceAccountId}/sweeps/{sweepId}`
            .replace("{" + "balanceAccountId" + "}", encodeURIComponent(String(balanceAccountId)))
            .replace("{" + "sweepId" + "}", encodeURIComponent(String(sweepId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(sweepConfigurationV2, "SweepConfigurationV2");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "SweepConfigurationV2");
    }
    /**
    * @summary Update a balance account
    * @param id {@link string } The unique identifier of the balance account.
    * @param balanceAccountUpdateRequest {@link BalanceAccountUpdateRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link BalanceAccount }
    */
    async updateBalanceAccount(id, balanceAccountUpdateRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(balanceAccountUpdateRequest, "BalanceAccountUpdateRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "BalanceAccount");
    }
    /**
    * @summary Create a balance account
    * @param balanceAccountInfo {@link BalanceAccountInfo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link BalanceAccount }
    */
    async createBalanceAccount(balanceAccountInfo, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(balanceAccountInfo, "BalanceAccountInfo");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "BalanceAccount");
    }
    /**
    * @summary Create a sweep
    * @param balanceAccountId {@link string } The unique identifier of the balance account.
    * @param sweepConfigurationV2 {@link SweepConfigurationV2 }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SweepConfigurationV2 }
    */
    async createSweep(balanceAccountId, sweepConfigurationV2, requestOptions) {
        const endpoint = `${this.baseUrl}/balanceAccounts/{balanceAccountId}/sweeps`
            .replace("{" + "balanceAccountId" + "}", encodeURIComponent(String(balanceAccountId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(sweepConfigurationV2, "SweepConfigurationV2");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "SweepConfigurationV2");
    }
}
exports.BalanceAccountsApi = BalanceAccountsApi;
//# sourceMappingURL=balanceAccountsApi.js.map