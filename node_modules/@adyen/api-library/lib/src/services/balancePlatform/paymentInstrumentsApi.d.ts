import Service from "../../service";
import Client from "../../client";
import { PaymentInstrument } from "../../typings/balancePlatform/models";
import { PaymentInstrumentInfo } from "../../typings/balancePlatform/models";
import { PaymentInstrumentRevealInfo } from "../../typings/balancePlatform/models";
import { PaymentInstrumentUpdateRequest } from "../../typings/balancePlatform/models";
import { TransactionRulesResponse } from "../../typings/balancePlatform/models";
import { UpdatePaymentInstrument } from "../../typings/balancePlatform/models";
import { IRequest } from "../../typings/requestOptions";
export declare class PaymentInstrumentsApi extends Service {
    private readonly API_BASEPATH;
    private baseUrl;
    constructor(client: Client);
    /**
    * @summary Get a payment instrument
    * @param id {@link string } The unique identifier of the payment instrument.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentInstrument }
    */
    getPaymentInstrument(id: string, requestOptions?: IRequest.Options): Promise<PaymentInstrument>;
    /**
    * @summary Get the PAN of a payment instrument
    * @param id {@link string } The unique identifier of the payment instrument.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentInstrumentRevealInfo }
    */
    getPanOfPaymentInstrument(id: string, requestOptions?: IRequest.Options): Promise<PaymentInstrumentRevealInfo>;
    /**
    * @summary Get all transaction rules for a payment instrument
    * @param id {@link string } The unique identifier of the payment instrument.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransactionRulesResponse }
    */
    getAllTransactionRulesForPaymentInstrument(id: string, requestOptions?: IRequest.Options): Promise<TransactionRulesResponse>;
    /**
    * @summary Update a payment instrument
    * @param id {@link string } The unique identifier of the payment instrument.
    * @param paymentInstrumentUpdateRequest {@link PaymentInstrumentUpdateRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link UpdatePaymentInstrument }
    */
    updatePaymentInstrument(id: string, paymentInstrumentUpdateRequest: PaymentInstrumentUpdateRequest, requestOptions?: IRequest.Options): Promise<UpdatePaymentInstrument>;
    /**
    * @summary Create a payment instrument
    * @param paymentInstrumentInfo {@link PaymentInstrumentInfo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentInstrument }
    */
    createPaymentInstrument(paymentInstrumentInfo: PaymentInstrumentInfo, requestOptions?: IRequest.Options): Promise<PaymentInstrument>;
}
