import Service from "../../service";
import Client from "../../client";
import { AcceptTermsOfServiceRequest } from "../../typings/legalEntityManagement/models";
import { AcceptTermsOfServiceResponse } from "../../typings/legalEntityManagement/models";
import { CalculateTermsOfServiceStatusResponse } from "../../typings/legalEntityManagement/models";
import { GetTermsOfServiceAcceptanceInfosResponse } from "../../typings/legalEntityManagement/models";
import { GetTermsOfServiceDocumentRequest } from "../../typings/legalEntityManagement/models";
import { GetTermsOfServiceDocumentResponse } from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
export declare class TermsOfServiceApi extends Service {
    private readonly API_BASEPATH;
    private baseUrl;
    constructor(client: Client);
    /**
    * @summary Get Terms of Service information for a legal entity
    * @param id {@link string } The unique identifier of the legal entity.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link GetTermsOfServiceAcceptanceInfosResponse }
    */
    getTermsOfServiceInformationForLegalEntity(id: string, requestOptions?: IRequest.Options): Promise<GetTermsOfServiceAcceptanceInfosResponse>;
    /**
    * @summary Get Terms of Service status
    * @param id {@link string } The unique identifier of the legal entity.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CalculateTermsOfServiceStatusResponse }
    */
    getTermsOfServiceStatus(id: string, requestOptions?: IRequest.Options): Promise<CalculateTermsOfServiceStatusResponse>;
    /**
    * @summary Accept Terms of Service
    * @param id {@link string } The unique identifier of the legal entity.
    * @param termsofservicedocumentid {@link string } The unique identifier of the Terms of Service document.
    * @param acceptTermsOfServiceRequest {@link AcceptTermsOfServiceRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AcceptTermsOfServiceResponse }
    */
    acceptTermsOfService(id: string, termsofservicedocumentid: string, acceptTermsOfServiceRequest: AcceptTermsOfServiceRequest, requestOptions?: IRequest.Options): Promise<AcceptTermsOfServiceResponse>;
    /**
    * @summary Get Terms of Service document
    * @param id {@link string } The unique identifier of the legal entity.
    * @param getTermsOfServiceDocumentRequest {@link GetTermsOfServiceDocumentRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link GetTermsOfServiceDocumentResponse }
    */
    getTermsOfServiceDocument(id: string, getTermsOfServiceDocumentRequest: GetTermsOfServiceDocumentRequest, requestOptions?: IRequest.Options): Promise<GetTermsOfServiceDocumentResponse>;
}
