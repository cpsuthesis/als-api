"use strict";
/*
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitConfigurationMerchantLevelApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/management/models");
class SplitConfigurationMerchantLevelApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://management-test.adyen.com/v1";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Delete a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async deleteSplitConfiguration(merchantId, splitConfigurationId, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Delete a split configuration rule
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param ruleId {@link string }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async deleteSplitConfigurationRule(merchantId, splitConfigurationId, ruleId, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "DELETE" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Get a list of split configurations
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfigurationList }
    */
    async listSplitConfigurations(merchantId, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfigurationList");
    }
    /**
    * @summary Get a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async getSplitConfiguration(merchantId, splitConfigurationId, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Update split configuration description
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param updateSplitConfigurationRequest {@link UpdateSplitConfigurationRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async updateSplitConfigurationDescription(merchantId, splitConfigurationId, updateSplitConfigurationRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(updateSplitConfigurationRequest, "UpdateSplitConfigurationRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Update split conditions
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The identifier of the split configuration.
    * @param ruleId {@link string } The unique identifier of the split configuration rule.
    * @param updateSplitConfigurationRuleRequest {@link UpdateSplitConfigurationRuleRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async updateSplitConditions(merchantId, splitConfigurationId, ruleId, updateSplitConfigurationRuleRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(updateSplitConfigurationRuleRequest, "UpdateSplitConfigurationRuleRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Update the split logic
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param ruleId {@link string } The unique identifier of the split configuration rule.
    * @param splitLogicId {@link string } The unique identifier of the split configuration split.
    * @param updateSplitConfigurationLogicRequest {@link UpdateSplitConfigurationLogicRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async updateSplitLogic(merchantId, splitConfigurationId, ruleId, splitLogicId, updateSplitConfigurationLogicRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}/splitLogic/{splitLogicId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)))
            .replace("{" + "splitLogicId" + "}", encodeURIComponent(String(splitLogicId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(updateSplitConfigurationLogicRequest, "UpdateSplitConfigurationLogicRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Create a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfiguration {@link SplitConfiguration }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async createSplitConfiguration(merchantId, splitConfiguration, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(splitConfiguration, "SplitConfiguration");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
    /**
    * @summary Create a rule
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param splitConfigurationRule {@link SplitConfigurationRule }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    async createRule(merchantId, splitConfigurationId, splitConfigurationRule, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(splitConfigurationRule, "SplitConfigurationRule");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
}
exports.SplitConfigurationMerchantLevelApi = SplitConfigurationMerchantLevelApi;
//# sourceMappingURL=splitConfigurationMerchantLevelApi.js.map