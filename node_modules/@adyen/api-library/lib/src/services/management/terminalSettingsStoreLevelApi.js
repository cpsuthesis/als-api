"use strict";
/*
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalSettingsStoreLevelApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/management/models");
class TerminalSettingsStoreLevelApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://management-test.adyen.com/v1";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Get the terminal logo
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Logo }
    */
    async getTerminalLogo(merchantId, reference, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalLogos`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "Logo");
    }
    /**
    * @summary Get terminal settings
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TerminalSettings }
    */
    async getTerminalSettings(merchantId, reference, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalSettings");
    }
    /**
    * @summary Get the terminal logo
    * @param storeId {@link string } The unique identifier of the store.
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Logo }
    */
    async getTerminalLogoByStoreId(storeId, requestOptions) {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalLogos`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "Logo");
    }
    /**
    * @summary Get terminal settings
    * @param storeId {@link string } The unique identifier of the store.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TerminalSettings }
    */
    async getTerminalSettingsByStoreId(storeId, requestOptions) {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalSettings`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalSettings");
    }
    /**
    * @summary Update the terminal logo
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T
    * @param logo {@link Logo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Logo }
    */
    async updateTerminalLogo(merchantId, reference, logo, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalLogos`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(logo, "Logo");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "Logo");
    }
    /**
    * @summary Update terminal settings
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param terminalSettings {@link TerminalSettings }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TerminalSettings }
    */
    async updateTerminalSettings(merchantId, reference, terminalSettings, requestOptions) {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(terminalSettings, "TerminalSettings");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalSettings");
    }
    /**
    * @summary Update the terminal logo
    * @param storeId {@link string } The unique identifier of the store.
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @param logo {@link Logo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Logo }
    */
    async updateTerminalLogoByStoreId(storeId, logo, requestOptions) {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalLogos`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(logo, "Logo");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "Logo");
    }
    /**
    * @summary Update terminal settings
    * @param storeId {@link string } The unique identifier of the store.
    * @param terminalSettings {@link TerminalSettings }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TerminalSettings }
    */
    async updateTerminalSettingsByStoreId(storeId, terminalSettings, requestOptions) {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalSettings`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(terminalSettings, "TerminalSettings");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "TerminalSettings");
    }
}
exports.TerminalSettingsStoreLevelApi = TerminalSettingsStoreLevelApi;
//# sourceMappingURL=terminalSettingsStoreLevelApi.js.map