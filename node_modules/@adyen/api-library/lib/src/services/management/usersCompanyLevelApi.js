"use strict";
/*
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersCompanyLevelApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/management/models");
class UsersCompanyLevelApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://management-test.adyen.com/v1";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Get a list of users
    * @param companyId {@link string } The unique identifier of the company account.
    * @param pageNumber {@link number } The number of the page to return.
    * @param pageSize {@link number } The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.
    * @param username {@link string } The partial or complete username to select all users that match.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ListCompanyUsersResponse }
    */
    async listUsers(companyId, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/users`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "ListCompanyUsersResponse");
    }
    /**
    * @summary Get user details
    * @param companyId {@link string } The unique identifier of the company account.
    * @param userId {@link string } The unique identifier of the user.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CompanyUser }
    */
    async getUserDetails(companyId, userId, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/users/{userId}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "CompanyUser");
    }
    /**
    * @summary Update user details
    * @param companyId {@link string } The unique identifier of the company account.
    * @param userId {@link string } The unique identifier of the user.
    * @param updateCompanyUserRequest {@link UpdateCompanyUserRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CompanyUser }
    */
    async updateUserDetails(companyId, userId, updateCompanyUserRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/users/{userId}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(updateCompanyUserRequest, "UpdateCompanyUserRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "PATCH" });
        return models_1.ObjectSerializer.deserialize(response, "CompanyUser");
    }
    /**
    * @summary Create a new user
    * @param companyId {@link string } The unique identifier of the company account.
    * @param createCompanyUserRequest {@link CreateCompanyUserRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CreateCompanyUserResponse }
    */
    async createNewUser(companyId, createCompanyUserRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/users`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(createCompanyUserRequest, "CreateCompanyUserRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "CreateCompanyUserResponse");
    }
}
exports.UsersCompanyLevelApi = UsersCompanyLevelApi;
//# sourceMappingURL=usersCompanyLevelApi.js.map