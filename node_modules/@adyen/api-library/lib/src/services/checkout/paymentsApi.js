"use strict";
/*
 * The version of the OpenAPI document: v70
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentsApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/checkout/models");
class PaymentsApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://checkout-test.adyen.com/v70";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Get the result of a payment session
    * @param sessionId {@link string } A unique identifier of the session.
    * @param sessionResult {@link string } The &#x60;sessionResult&#x60; value from the Drop-in or Component.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SessionResultResponse }
    */
    async getResultOfPaymentSession(sessionId, requestOptions) {
        const endpoint = `${this.baseUrl}/sessions/{sessionId}`
            .replace("{" + "sessionId" + "}", encodeURIComponent(String(sessionId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "SessionResultResponse");
    }
    /**
    * @summary Get the list of brands on the card
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param cardDetailsRequest {@link CardDetailsRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CardDetailsResponse }
    */
    async cardDetails(cardDetailsRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/cardDetails`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(cardDetailsRequest, "CardDetailsRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "CardDetailsResponse");
    }
    /**
    * @summary Start a transaction for donations
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param donationPaymentRequest {@link DonationPaymentRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link DonationPaymentResponse }
    */
    async donations(donationPaymentRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/donations`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(donationPaymentRequest, "DonationPaymentRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "DonationPaymentResponse");
    }
    /**
    * @summary Get a list of available payment methods
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param paymentMethodsRequest {@link PaymentMethodsRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentMethodsResponse }
    */
    async paymentMethods(paymentMethodsRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/paymentMethods`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(paymentMethodsRequest, "PaymentMethodsRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "PaymentMethodsResponse");
    }
    /**
    * @summary Start a transaction
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param paymentRequest {@link PaymentRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentResponse }
    */
    async payments(paymentRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/payments`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(paymentRequest, "PaymentRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "PaymentResponse");
    }
    /**
    * @summary Submit details for a payment
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param paymentDetailsRequest {@link PaymentDetailsRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentDetailsResponse }
    */
    async paymentsDetails(paymentDetailsRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/payments/details`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(paymentDetailsRequest, "PaymentDetailsRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "PaymentDetailsResponse");
    }
    /**
    * @summary Create a payment session
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param createCheckoutSessionRequest {@link CreateCheckoutSessionRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CreateCheckoutSessionResponse }
    */
    async sessions(createCheckoutSessionRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/sessions`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(createCheckoutSessionRequest, "CreateCheckoutSessionRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "CreateCheckoutSessionResponse");
    }
}
exports.PaymentsApi = PaymentsApi;
//# sourceMappingURL=paymentsApi.js.map