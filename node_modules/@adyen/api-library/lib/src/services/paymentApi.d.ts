import Client from "../client";
import Service from "../service";
import { AdjustAuthorisationRequest } from "../typings/payment/models";
import { AuthenticationResultRequest } from "../typings/payment/models";
import { AuthenticationResultResponse } from "../typings/payment/models";
import { CancelOrRefundRequest } from "../typings/payment/models";
import { CancelRequest } from "../typings/payment/models";
import { CaptureRequest } from "../typings/payment/models";
import { DonationRequest } from "../typings/payment/models";
import { ModificationResult } from "../typings/payment/models";
import { PaymentRequest } from "../typings/payment/models";
import { PaymentRequest3d } from "../typings/payment/models";
import { PaymentRequest3ds2 } from "../typings/payment/models";
import { PaymentResult } from "../typings/payment/models";
import { RefundRequest } from "../typings/payment/models";
import { TechnicalCancelRequest } from "../typings/payment/models";
import { ThreeDS2ResultRequest } from "../typings/payment/models";
import { ThreeDS2ResultResponse } from "../typings/payment/models";
import { VoidPendingRefundRequest } from "../typings/payment/models";
import { IRequest } from "../typings/requestOptions";
export declare class PaymentAPI extends Service {
    private readonly API_BASEPATH;
    private baseUrl;
    constructor(client: Client);
    /**
    * @summary Change the authorised amount
    * @param adjustAuthorisationRequest {@link AdjustAuthorisationRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    adjustAuthorisation(adjustAuthorisationRequest: AdjustAuthorisationRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Create an authorisation
    * @param paymentRequest {@link PaymentRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentResult }
    */
    authorise(paymentRequest: PaymentRequest, requestOptions?: IRequest.Options): Promise<PaymentResult>;
    /**
    * @summary Complete a 3DS authorisation
    * @param paymentRequest3d {@link PaymentRequest3d }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentResult }
    */
    authorise3d(paymentRequest3d: PaymentRequest3d, requestOptions?: IRequest.Options): Promise<PaymentResult>;
    /**
    * @summary Complete a 3DS2 authorisation
    * @param paymentRequest3ds2 {@link PaymentRequest3ds2 }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentResult }
    */
    authorise3ds2(paymentRequest3ds2: PaymentRequest3ds2, requestOptions?: IRequest.Options): Promise<PaymentResult>;
    /**
    * @summary Cancel an authorisation
    * @param cancelRequest {@link CancelRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    cancel(cancelRequest: CancelRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Cancel or refund a payment
    * @param cancelOrRefundRequest {@link CancelOrRefundRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    cancelOrRefund(cancelOrRefundRequest: CancelOrRefundRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Capture an authorisation
    * @param captureRequest {@link CaptureRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    capture(captureRequest: CaptureRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Create a donation
    * @param donationRequest {@link DonationRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    donate(donationRequest: DonationRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Get the 3DS authentication result
    * @param authenticationResultRequest {@link AuthenticationResultRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AuthenticationResultResponse }
    */
    getAuthenticationResult(authenticationResultRequest: AuthenticationResultRequest, requestOptions?: IRequest.Options): Promise<AuthenticationResultResponse>;
    /**
    * @summary Refund a captured payment
    * @param refundRequest {@link RefundRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    refund(refundRequest: RefundRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Get the 3DS2 authentication result
    * @param threeDS2ResultRequest {@link ThreeDS2ResultRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ThreeDS2ResultResponse }
    */
    retrieve3ds2Result(threeDS2ResultRequest: ThreeDS2ResultRequest, requestOptions?: IRequest.Options): Promise<ThreeDS2ResultResponse>;
    /**
    * @summary Cancel an authorisation using your reference
    * @param technicalCancelRequest {@link TechnicalCancelRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    technicalCancel(technicalCancelRequest: TechnicalCancelRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
    /**
    * @summary Cancel an in-person refund
    * @param voidPendingRefundRequest {@link VoidPendingRefundRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModificationResult }
    */
    voidPendingRefund(voidPendingRefundRequest: VoidPendingRefundRequest, requestOptions?: IRequest.Options): Promise<ModificationResult>;
}
export default PaymentAPI;
