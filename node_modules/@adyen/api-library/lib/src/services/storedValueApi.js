"use strict";
/*
 * The version of the OpenAPI document: v46
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoredValueAPI = void 0;
const getJsonResponse_1 = __importDefault(require("../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../service"));
const resource_1 = __importDefault(require("./resource"));
const models_1 = require("../typings/storedValue/models");
class StoredValueAPI extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://pal-test.adyen.com/pal/servlet/StoredValue/v46";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Changes the status of the payment method.
    * @param storedValueStatusChangeRequest {@link StoredValueStatusChangeRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueStatusChangeResponse }
    */
    async changeStatus(storedValueStatusChangeRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/changeStatus`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueStatusChangeRequest, "StoredValueStatusChangeRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueStatusChangeResponse");
    }
    /**
    * @summary Checks the balance.
    * @param storedValueBalanceCheckRequest {@link StoredValueBalanceCheckRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueBalanceCheckResponse }
    */
    async checkBalance(storedValueBalanceCheckRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/checkBalance`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueBalanceCheckRequest, "StoredValueBalanceCheckRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueBalanceCheckResponse");
    }
    /**
    * @summary Issues a new card.
    * @param storedValueIssueRequest {@link StoredValueIssueRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueIssueResponse }
    */
    async issue(storedValueIssueRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/issue`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueIssueRequest, "StoredValueIssueRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueIssueResponse");
    }
    /**
    * @summary Loads the payment method.
    * @param storedValueLoadRequest {@link StoredValueLoadRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueLoadResponse }
    */
    async load(storedValueLoadRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/load`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueLoadRequest, "StoredValueLoadRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueLoadResponse");
    }
    /**
    * @summary Merge the balance of two cards.
    * @param storedValueBalanceMergeRequest {@link StoredValueBalanceMergeRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueBalanceMergeResponse }
    */
    async mergeBalance(storedValueBalanceMergeRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/mergeBalance`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueBalanceMergeRequest, "StoredValueBalanceMergeRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueBalanceMergeResponse");
    }
    /**
    * @summary Voids a transaction.
    * @param storedValueVoidRequest {@link StoredValueVoidRequest }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoredValueVoidResponse }
    */
    async voidTransaction(storedValueVoidRequest, requestOptions) {
        const endpoint = `${this.baseUrl}/voidTransaction`;
        const resource = new resource_1.default(this, endpoint);
        const request = models_1.ObjectSerializer.serialize(storedValueVoidRequest, "StoredValueVoidRequest");
        const response = await (0, getJsonResponse_1.default)(resource, request, { ...requestOptions, method: "POST" });
        return models_1.ObjectSerializer.deserialize(response, "StoredValueVoidResponse");
    }
}
exports.StoredValueAPI = StoredValueAPI;
exports.default = StoredValueAPI;
//# sourceMappingURL=storedValueApi.js.map